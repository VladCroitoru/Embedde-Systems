
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  00000fae  00001042  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800098  00800098  0000107a  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  0000107c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  00001d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a8  00000000  00000000  00001eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000040a  00000000  00000000  0000205e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001df4  00000000  00000000  00002468  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000de8  00000000  00000000  0000425c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001bc4  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000360  00000000  00000000  00006c08  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000073f  00000000  00000000  00006f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001376  00000000  00000000  000076a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000440  00000000  00000000  00008a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000070  00000000  00000000  00008e5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 39       	cpi	r26, 0x98	; 152
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e9       	ldi	r26, 0x98	; 152
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3a       	cpi	r26, 0xA4	; 164
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  8a:	0c 94 d5 07 	jmp	0xfaa	; 0xfaa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <create>:
#include "motor.h"
#include "car_2wd.h"

Car *car;

void create(){
  92:	ef 92       	push	r14
  94:	ff 92       	push	r15
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29

	HBridge *leftHBridge = HBRIDGE_create(
  9e:	87 e3       	ldi	r24, 0x37	; 55
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	68 e3       	ldi	r22, 0x38	; 56
  a4:	70 e0       	ldi	r23, 0x00	; 0
  a6:	46 e3       	ldi	r20, 0x36	; 54
  a8:	50 e0       	ldi	r21, 0x00	; 0
  aa:	23 e0       	ldi	r18, 0x03	; 3
  ac:	0e 94 b0 01 	call	0x360	; 0x360 <GPIO_create>
  b0:	ec 01       	movw	r28, r24
  b2:	87 e3       	ldi	r24, 0x37	; 55
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	68 e3       	ldi	r22, 0x38	; 56
  b8:	70 e0       	ldi	r23, 0x00	; 0
  ba:	46 e3       	ldi	r20, 0x36	; 54
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	22 e0       	ldi	r18, 0x02	; 2
  c0:	0e 94 b0 01 	call	0x360	; 0x360 <GPIO_create>
  c4:	8c 01       	movw	r16, r24
  c6:	87 e3       	ldi	r24, 0x37	; 55
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	68 e3       	ldi	r22, 0x38	; 56
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	46 e3       	ldi	r20, 0x36	; 54
  d0:	50 e0       	ldi	r21, 0x00	; 0
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	0e 94 b0 01 	call	0x360	; 0x360 <GPIO_create>
  d8:	ac 01       	movw	r20, r24
  da:	ce 01       	movw	r24, r28
  dc:	b8 01       	movw	r22, r16
  de:	0e 94 0b 02 	call	0x416	; 0x416 <HBRIDGE_create>
			GPIO_create(&DDRB,&PORTB,&PINB,3),
			GPIO_create(&DDRB,&PORTB,&PINB,2),
			GPIO_create(&DDRB,&PORTB,&PINB,1)
			);
	Motor *leftMotor = MOTOR_create(leftHBridge,&pwm_0_set);
  e2:	6b ed       	ldi	r22, 0xDB	; 219
  e4:	72 e0       	ldi	r23, 0x02	; 2
  e6:	0e 94 6f 02 	call	0x4de	; 0x4de <MOTOR_create>
  ea:	7c 01       	movw	r14, r24
	
	HBridge *rightHBridge = HBRIDGE_create(
  ec:	81 e3       	ldi	r24, 0x31	; 49
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	62 e3       	ldi	r22, 0x32	; 50
  f2:	70 e0       	ldi	r23, 0x00	; 0
  f4:	40 e3       	ldi	r20, 0x30	; 48
  f6:	50 e0       	ldi	r21, 0x00	; 0
  f8:	27 e0       	ldi	r18, 0x07	; 7
  fa:	0e 94 b0 01 	call	0x360	; 0x360 <GPIO_create>
  fe:	ec 01       	movw	r28, r24
 100:	81 e3       	ldi	r24, 0x31	; 49
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	62 e3       	ldi	r22, 0x32	; 50
 106:	70 e0       	ldi	r23, 0x00	; 0
 108:	40 e3       	ldi	r20, 0x30	; 48
 10a:	50 e0       	ldi	r21, 0x00	; 0
 10c:	25 e0       	ldi	r18, 0x05	; 5
 10e:	0e 94 b0 01 	call	0x360	; 0x360 <GPIO_create>
 112:	8c 01       	movw	r16, r24
 114:	81 e3       	ldi	r24, 0x31	; 49
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	62 e3       	ldi	r22, 0x32	; 50
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	40 e3       	ldi	r20, 0x30	; 48
 11e:	50 e0       	ldi	r21, 0x00	; 0
 120:	26 e0       	ldi	r18, 0x06	; 6
 122:	0e 94 b0 01 	call	0x360	; 0x360 <GPIO_create>
 126:	ac 01       	movw	r20, r24
 128:	ce 01       	movw	r24, r28
 12a:	b8 01       	movw	r22, r16
 12c:	0e 94 0b 02 	call	0x416	; 0x416 <HBRIDGE_create>
			GPIO_create(&DDRD,&PORTD,&PIND,7),
			GPIO_create(&DDRD,&PORTD,&PIND,5),
			GPIO_create(&DDRD,&PORTD,&PIND,6)
			);
	Motor *rightMotor = MOTOR_create(rightHBridge,&pwm_2_set);
 130:	6a ef       	ldi	r22, 0xFA	; 250
 132:	72 e0       	ldi	r23, 0x02	; 2
 134:	0e 94 6f 02 	call	0x4de	; 0x4de <MOTOR_create>
 138:	bc 01       	movw	r22, r24

	car = CAR_create(leftMotor,rightMotor);
 13a:	c7 01       	movw	r24, r14
 13c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <CAR_create>
 140:	90 93 99 00 	sts	0x0099, r25
 144:	80 93 98 00 	sts	0x0098, r24
}
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	1f 91       	pop	r17
 14e:	0f 91       	pop	r16
 150:	ff 90       	pop	r15
 152:	ef 90       	pop	r14
 154:	08 95       	ret

00000156 <main>:

int main() {
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
	uart_stdio_Init();
 15a:	0e 94 30 03 	call	0x660	; 0x660 <uart_stdio_Init>

	char key;
	create();
 15e:	0e 94 49 00 	call	0x92	; 0x92 <create>

	while(1){
		printf("\nEnter command:");
 162:	c0 e6       	ldi	r28, 0x60	; 96
 164:	d0 e0       	ldi	r29, 0x00	; 0
 166:	00 d0       	rcall	.+0      	; 0x168 <main+0x12>
 168:	ed b7       	in	r30, 0x3d	; 61
 16a:	fe b7       	in	r31, 0x3e	; 62
 16c:	d2 83       	std	Z+2, r29	; 0x02
 16e:	c1 83       	std	Z+1, r28	; 0x01
 170:	0e 94 02 05 	call	0xa04	; 0xa04 <printf>
		key = getchar();
 174:	0f 90       	pop	r0
 176:	0f 90       	pop	r0
 178:	80 91 9e 00 	lds	r24, 0x009E
 17c:	90 91 9f 00 	lds	r25, 0x009F
 180:	0e 94 c0 04 	call	0x980	; 0x980 <fgetc>

		switch(key){
 184:	8c 36       	cpi	r24, 0x6C	; 108
 186:	89 f1       	breq	.+98     	; 0x1ea <main+0x94>
 188:	8d 36       	cpi	r24, 0x6D	; 109
 18a:	28 f4       	brcc	.+10     	; 0x196 <main+0x40>
 18c:	81 36       	cpi	r24, 0x61	; 97
 18e:	51 f0       	breq	.+20     	; 0x1a4 <main+0x4e>
 190:	84 36       	cpi	r24, 0x64	; 100
 192:	49 f7       	brne	.-46     	; 0x166 <main+0x10>
 194:	15 c0       	rjmp	.+42     	; 0x1c0 <main+0x6a>
 196:	83 37       	cpi	r24, 0x73	; 115
 198:	d1 f0       	breq	.+52     	; 0x1ce <main+0x78>
 19a:	87 37       	cpi	r24, 0x77	; 119
 19c:	51 f0       	breq	.+20     	; 0x1b2 <main+0x5c>
 19e:	80 37       	cpi	r24, 0x70	; 112
 1a0:	11 f7       	brne	.-60     	; 0x166 <main+0x10>
 1a2:	1c c0       	rjmp	.+56     	; 0x1dc <main+0x86>
		case 'a' :
			CAR_left(car);
 1a4:	80 91 98 00 	lds	r24, 0x0098
 1a8:	90 91 99 00 	lds	r25, 0x0099
 1ac:	0e 94 2c 01 	call	0x258	; 0x258 <CAR_left>
			break;
 1b0:	da cf       	rjmp	.-76     	; 0x166 <main+0x10>
		case 'w':
			CAR_forward(car);
 1b2:	80 91 98 00 	lds	r24, 0x0098
 1b6:	90 91 99 00 	lds	r25, 0x0099
 1ba:	0e 94 9d 01 	call	0x33a	; 0x33a <CAR_forward>
			break;
 1be:	d3 cf       	rjmp	.-90     	; 0x166 <main+0x10>
		case 'd':
			CAR_right(car);
 1c0:	80 91 98 00 	lds	r24, 0x0098
 1c4:	90 91 99 00 	lds	r25, 0x0099
 1c8:	0e 94 40 01 	call	0x280	; 0x280 <CAR_right>
			break;
 1cc:	cc cf       	rjmp	.-104    	; 0x166 <main+0x10>
		case 's':
			CAR_backward(car);
 1ce:	80 91 98 00 	lds	r24, 0x0098
 1d2:	90 91 99 00 	lds	r25, 0x0099
 1d6:	0e 94 8a 01 	call	0x314	; 0x314 <CAR_backward>
			break;
 1da:	c5 cf       	rjmp	.-118    	; 0x166 <main+0x10>
		case 'p':
			CAR_start(car);
 1dc:	80 91 98 00 	lds	r24, 0x0098
 1e0:	90 91 99 00 	lds	r25, 0x0099
 1e4:	0e 94 10 01 	call	0x220	; 0x220 <CAR_start>
			break;
 1e8:	be cf       	rjmp	.-132    	; 0x166 <main+0x10>
		case 'l':
			CAR_stop(car);
 1ea:	80 91 98 00 	lds	r24, 0x0098
 1ee:	90 91 99 00 	lds	r25, 0x0099
 1f2:	0e 94 1e 01 	call	0x23c	; 0x23c <CAR_stop>
 1f6:	b7 cf       	rjmp	.-146    	; 0x166 <main+0x10>

000001f8 <CAR_create>:
#include "car_2wd.h"
#include <stdlib.h>

Car* CAR_create(Motor *leftMotor,Motor *rightMotor){
 1f8:	0f 93       	push	r16
 1fa:	1f 93       	push	r17
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	ec 01       	movw	r28, r24
 202:	8b 01       	movw	r16, r22
	Car *descriptor = malloc(sizeof(Car));
 204:	84 e0       	ldi	r24, 0x04	; 4
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 8d 03 	call	0x71a	; 0x71a <malloc>
 20c:	fc 01       	movw	r30, r24
	descriptor->leftMotor = leftMotor;
 20e:	d1 83       	std	Z+1, r29	; 0x01
 210:	c0 83       	st	Z, r28
	descriptor->rightMotor = rightMotor;
 212:	13 83       	std	Z+3, r17	; 0x03
 214:	02 83       	std	Z+2, r16	; 0x02

	return descriptor;
}
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	1f 91       	pop	r17
 21c:	0f 91       	pop	r16
 21e:	08 95       	ret

00000220 <CAR_start>:

void CAR_start(Car *descriptor){
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	ec 01       	movw	r28, r24
	MOTOR_start(descriptor->leftMotor);
 226:	88 81       	ld	r24, Y
 228:	99 81       	ldd	r25, Y+1	; 0x01
 22a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <MOTOR_start>
	MOTOR_start(descriptor->rightMotor);
 22e:	8a 81       	ldd	r24, Y+2	; 0x02
 230:	9b 81       	ldd	r25, Y+3	; 0x03
 232:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <MOTOR_start>
}
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <CAR_stop>:

void CAR_stop(Car *descriptor){
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	ec 01       	movw	r28, r24
	MOTOR_stop(descriptor->leftMotor);
 242:	88 81       	ld	r24, Y
 244:	99 81       	ldd	r25, Y+1	; 0x01
 246:	0e 94 92 02 	call	0x524	; 0x524 <MOTOR_stop>
	MOTOR_stop(descriptor->rightMotor);
 24a:	8a 81       	ldd	r24, Y+2	; 0x02
 24c:	9b 81       	ldd	r25, Y+3	; 0x03
 24e:	0e 94 92 02 	call	0x524	; 0x524 <MOTOR_stop>
}
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <CAR_left>:

void CAR_left(Car *descriptor){
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	ec 01       	movw	r28, r24
	MOTOR_set_speed(descriptor->leftMotor,descriptor->leftMotor->speed-1);
 25e:	88 81       	ld	r24, Y
 260:	99 81       	ldd	r25, Y+1	; 0x01
 262:	fc 01       	movw	r30, r24
 264:	62 81       	ldd	r22, Z+2	; 0x02
 266:	61 50       	subi	r22, 0x01	; 1
 268:	0e 94 b9 02 	call	0x572	; 0x572 <MOTOR_set_speed>
	MOTOR_set_speed(descriptor->rightMotor,descriptor->rightMotor->speed+1);
 26c:	8a 81       	ldd	r24, Y+2	; 0x02
 26e:	9b 81       	ldd	r25, Y+3	; 0x03
 270:	fc 01       	movw	r30, r24
 272:	62 81       	ldd	r22, Z+2	; 0x02
 274:	6f 5f       	subi	r22, 0xFF	; 255
 276:	0e 94 b9 02 	call	0x572	; 0x572 <MOTOR_set_speed>
}
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	08 95       	ret

00000280 <CAR_right>:

void CAR_right(Car *descriptor){
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	ec 01       	movw	r28, r24
	MOTOR_set_speed(descriptor->rightMotor,descriptor->rightMotor->speed-1);
 286:	8a 81       	ldd	r24, Y+2	; 0x02
 288:	9b 81       	ldd	r25, Y+3	; 0x03
 28a:	fc 01       	movw	r30, r24
 28c:	62 81       	ldd	r22, Z+2	; 0x02
 28e:	61 50       	subi	r22, 0x01	; 1
 290:	0e 94 b9 02 	call	0x572	; 0x572 <MOTOR_set_speed>
	MOTOR_set_speed(descriptor->leftMotor,descriptor->leftMotor->speed+1);
 294:	88 81       	ld	r24, Y
 296:	99 81       	ldd	r25, Y+1	; 0x01
 298:	fc 01       	movw	r30, r24
 29a:	62 81       	ldd	r22, Z+2	; 0x02
 29c:	6f 5f       	subi	r22, 0xFF	; 255
 29e:	0e 94 b9 02 	call	0x572	; 0x572 <MOTOR_set_speed>
}
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <CAR_brake>:
	CAR_calibrate_speed(descriptor,1);
	MOTOR_set_direction(descriptor->leftMotor,MOTOR_DIRECTION_LEFT);
	MOTOR_set_direction(descriptor->rightMotor,MOTOR_DIRECTION_LEFT);
}

void CAR_brake(Car *descriptor){
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	ec 01       	movw	r28, r24
	MOTOR_brake(descriptor->leftMotor);
 2ae:	88 81       	ld	r24, Y
 2b0:	99 81       	ldd	r25, Y+1	; 0x01
 2b2:	0e 94 9a 02 	call	0x534	; 0x534 <MOTOR_brake>
	MOTOR_brake(descriptor->rightMotor);
 2b6:	8a 81       	ldd	r24, Y+2	; 0x02
 2b8:	9b 81       	ldd	r25, Y+3	; 0x03
 2ba:	0e 94 9a 02 	call	0x534	; 0x534 <MOTOR_brake>
}
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <CAR_calibrate_speed>:

void CAR_calibrate_speed(Car *descriptor,uint8_t increment){
 2c4:	0f 93       	push	r16
 2c6:	1f 93       	push	r17
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	8c 01       	movw	r16, r24
	int new_speed = (descriptor->leftMotor->speed + descriptor->rightMotor->speed) / 2 + increment;
 2ce:	dc 01       	movw	r26, r24
 2d0:	8d 91       	ld	r24, X+
 2d2:	9c 91       	ld	r25, X
 2d4:	11 97       	sbiw	r26, 0x01	; 1
 2d6:	12 96       	adiw	r26, 0x02	; 2
 2d8:	ed 91       	ld	r30, X+
 2da:	fc 91       	ld	r31, X
 2dc:	13 97       	sbiw	r26, 0x03	; 3
 2de:	22 81       	ldd	r18, Z+2	; 0x02
 2e0:	fc 01       	movw	r30, r24
 2e2:	32 81       	ldd	r19, Z+2	; 0x02
 2e4:	c3 2f       	mov	r28, r19
 2e6:	d0 e0       	ldi	r29, 0x00	; 0
 2e8:	c2 0f       	add	r28, r18
 2ea:	d1 1d       	adc	r29, r1
 2ec:	d5 95       	asr	r29
 2ee:	c7 95       	ror	r28
 2f0:	c6 0f       	add	r28, r22
 2f2:	d1 1d       	adc	r29, r1
	MOTOR_set_speed(descriptor->leftMotor,new_speed);
 2f4:	6c 2f       	mov	r22, r28
 2f6:	0e 94 b9 02 	call	0x572	; 0x572 <MOTOR_set_speed>
	MOTOR_set_speed(descriptor->rightMotor,new_speed);
 2fa:	d8 01       	movw	r26, r16
 2fc:	12 96       	adiw	r26, 0x02	; 2
 2fe:	8d 91       	ld	r24, X+
 300:	9c 91       	ld	r25, X
 302:	13 97       	sbiw	r26, 0x03	; 3
 304:	6c 2f       	mov	r22, r28
 306:	0e 94 b9 02 	call	0x572	; 0x572 <MOTOR_set_speed>
}
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	1f 91       	pop	r17
 310:	0f 91       	pop	r16
 312:	08 95       	ret

00000314 <CAR_backward>:
	CAR_calibrate_speed(descriptor,1);
	MOTOR_set_direction(descriptor->leftMotor,MOTOR_DIRECTION_RIGHT);
	MOTOR_set_direction(descriptor->rightMotor,MOTOR_DIRECTION_RIGHT);
}

void CAR_backward(Car *descriptor){
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	ec 01       	movw	r28, r24
	CAR_calibrate_speed(descriptor,1);
 31a:	61 e0       	ldi	r22, 0x01	; 1
 31c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <CAR_calibrate_speed>
	MOTOR_set_direction(descriptor->leftMotor,MOTOR_DIRECTION_LEFT);
 320:	88 81       	ld	r24, Y
 322:	99 81       	ldd	r25, Y+1	; 0x01
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	0e 94 c1 02 	call	0x582	; 0x582 <MOTOR_set_direction>
	MOTOR_set_direction(descriptor->rightMotor,MOTOR_DIRECTION_LEFT);
 32a:	8a 81       	ldd	r24, Y+2	; 0x02
 32c:	9b 81       	ldd	r25, Y+3	; 0x03
 32e:	60 e0       	ldi	r22, 0x00	; 0
 330:	0e 94 c1 02 	call	0x582	; 0x582 <MOTOR_set_direction>
}
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	08 95       	ret

0000033a <CAR_forward>:
void CAR_right(Car *descriptor){
	MOTOR_set_speed(descriptor->rightMotor,descriptor->rightMotor->speed-1);
	MOTOR_set_speed(descriptor->leftMotor,descriptor->leftMotor->speed+1);
}

void CAR_forward(Car *descriptor){
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	ec 01       	movw	r28, r24
	CAR_calibrate_speed(descriptor,1);
 340:	61 e0       	ldi	r22, 0x01	; 1
 342:	0e 94 62 01 	call	0x2c4	; 0x2c4 <CAR_calibrate_speed>
	MOTOR_set_direction(descriptor->leftMotor,MOTOR_DIRECTION_RIGHT);
 346:	88 81       	ld	r24, Y
 348:	99 81       	ldd	r25, Y+1	; 0x01
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	0e 94 c1 02 	call	0x582	; 0x582 <MOTOR_set_direction>
	MOTOR_set_direction(descriptor->rightMotor,MOTOR_DIRECTION_RIGHT);
 350:	8a 81       	ldd	r24, Y+2	; 0x02
 352:	9b 81       	ldd	r25, Y+3	; 0x03
 354:	61 e0       	ldi	r22, 0x01	; 1
 356:	0e 94 c1 02 	call	0x582	; 0x582 <MOTOR_set_direction>
}
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	08 95       	ret

00000360 <GPIO_create>:
#include "gpio.h"
#include <stdlib.h>
#include "utils.h"

GPIO* GPIO_create(uint8_t volatile *ddr,uint8_t volatile *port,uint8_t volatile *pin,uint8_t id){
 360:	cf 92       	push	r12
 362:	df 92       	push	r13
 364:	ef 92       	push	r14
 366:	ff 92       	push	r15
 368:	0f 93       	push	r16
 36a:	1f 93       	push	r17
 36c:	df 93       	push	r29
 36e:	cf 93       	push	r28
 370:	0f 92       	push	r0
 372:	cd b7       	in	r28, 0x3d	; 61
 374:	de b7       	in	r29, 0x3e	; 62
 376:	7c 01       	movw	r14, r24
 378:	6b 01       	movw	r12, r22
 37a:	8a 01       	movw	r16, r20
	GPIO *descriptor = malloc(sizeof(GPIO));
 37c:	87 e0       	ldi	r24, 0x07	; 7
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	29 83       	std	Y+1, r18	; 0x01
 382:	0e 94 8d 03 	call	0x71a	; 0x71a <malloc>
 386:	fc 01       	movw	r30, r24
	descriptor->ddr = ddr;
 388:	f1 82       	std	Z+1, r15	; 0x01
 38a:	e0 82       	st	Z, r14
	descriptor->port = port;
 38c:	d3 82       	std	Z+3, r13	; 0x03
 38e:	c2 82       	std	Z+2, r12	; 0x02
	descriptor->pin = pin;
 390:	15 83       	std	Z+5, r17	; 0x05
 392:	04 83       	std	Z+4, r16	; 0x04
	descriptor->id = id;
 394:	29 81       	ldd	r18, Y+1	; 0x01
 396:	26 83       	std	Z+6, r18	; 0x06

	return descriptor;
}
 398:	0f 90       	pop	r0
 39a:	cf 91       	pop	r28
 39c:	df 91       	pop	r29
 39e:	1f 91       	pop	r17
 3a0:	0f 91       	pop	r16
 3a2:	ff 90       	pop	r15
 3a4:	ef 90       	pop	r14
 3a6:	df 90       	pop	r13
 3a8:	cf 90       	pop	r12
 3aa:	08 95       	ret

000003ac <GPIO_set_mode>:

void GPIO_set_mode(GPIO *descriptor,GPIO_Mode mode){
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	ec 01       	movw	r28, r24
	switch(mode){
 3b2:	66 23       	and	r22, r22
 3b4:	51 f0       	breq	.+20     	; 0x3ca <GPIO_set_mode+0x1e>
 3b6:	61 30       	cpi	r22, 0x01	; 1
 3b8:	69 f4       	brne	.+26     	; 0x3d4 <GPIO_set_mode+0x28>
	case GPIO_MODE_INPUT:
		bit_set_0(descriptor->ddr,descriptor->id);
 3ba:	88 81       	ld	r24, Y
 3bc:	99 81       	ldd	r25, Y+1	; 0x01
 3be:	6e 81       	ldd	r22, Y+6	; 0x06
 3c0:	0e 94 4d 03 	call	0x69a	; 0x69a <bit_set_0>
		bit_set_1(descriptor->port,descriptor->id);
 3c4:	8a 81       	ldd	r24, Y+2	; 0x02
 3c6:	9b 81       	ldd	r25, Y+3	; 0x03
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <GPIO_set_mode+0x22>
		break;

	case GPIO_MODE_OUTPUT:
		bit_set_1(descriptor->ddr,descriptor->id);
 3ca:	88 81       	ld	r24, Y
 3cc:	99 81       	ldd	r25, Y+1	; 0x01
 3ce:	6e 81       	ldd	r22, Y+6	; 0x06
 3d0:	0e 94 41 03 	call	0x682	; 0x682 <bit_set_1>
		break;
	}
}
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	08 95       	ret

000003da <GPIO_write>:

void GPIO_write(GPIO *descriptor,GPIO_Value value){
 3da:	fc 01       	movw	r30, r24
 3dc:	82 81       	ldd	r24, Z+2	; 0x02
 3de:	93 81       	ldd	r25, Z+3	; 0x03
	if(value == GPIO_LOW){
 3e0:	66 23       	and	r22, r22
 3e2:	21 f4       	brne	.+8      	; 0x3ec <GPIO_write+0x12>
		bit_set_0(descriptor->port,descriptor->id);
 3e4:	66 81       	ldd	r22, Z+6	; 0x06
 3e6:	0e 94 4d 03 	call	0x69a	; 0x69a <bit_set_0>
 3ea:	08 95       	ret
	} else {
		bit_set_1(descriptor->port,descriptor->id);
 3ec:	66 81       	ldd	r22, Z+6	; 0x06
 3ee:	0e 94 41 03 	call	0x682	; 0x682 <bit_set_1>
 3f2:	08 95       	ret

000003f4 <GPIO_read>:
	}
}

GPIO_Value GPIO_read(GPIO *descriptor){
 3f4:	fc 01       	movw	r30, r24
	uint8_t value = (*descriptor->pin) & (1 << descriptor->id);
 3f6:	a4 81       	ldd	r26, Z+4	; 0x04
 3f8:	b5 81       	ldd	r27, Z+5	; 0x05
 3fa:	9c 91       	ld	r25, X
 3fc:	21 e0       	ldi	r18, 0x01	; 1
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	06 80       	ldd	r0, Z+6	; 0x06
 402:	02 c0       	rjmp	.+4      	; 0x408 <GPIO_read+0x14>
 404:	22 0f       	add	r18, r18
 406:	33 1f       	adc	r19, r19
 408:	0a 94       	dec	r0
 40a:	e2 f7       	brpl	.-8      	; 0x404 <GPIO_read+0x10>
 40c:	92 23       	and	r25, r18

	return value == 0 ? GPIO_LOW : GPIO_HIGH;
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	09 f4       	brne	.+2      	; 0x414 <GPIO_read+0x20>
 412:	80 e0       	ldi	r24, 0x00	; 0
}
 414:	08 95       	ret

00000416 <HBRIDGE_create>:
#include "hbridge.h"
#include "utils.h"
#include <stdlib.h>

HBridge* HBRIDGE_create(GPIO *en,GPIO *in1,GPIO *in2){
 416:	ef 92       	push	r14
 418:	ff 92       	push	r15
 41a:	0f 93       	push	r16
 41c:	1f 93       	push	r17
 41e:	cf 93       	push	r28
 420:	df 93       	push	r29
 422:	8c 01       	movw	r16, r24
 424:	eb 01       	movw	r28, r22
 426:	7a 01       	movw	r14, r20
	HBridge *descriptor = malloc(sizeof(HBridge));
 428:	86 e0       	ldi	r24, 0x06	; 6
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	0e 94 8d 03 	call	0x71a	; 0x71a <malloc>
 430:	fc 01       	movw	r30, r24
	descriptor->en = en;
 432:	11 83       	std	Z+1, r17	; 0x01
 434:	00 83       	st	Z, r16
	descriptor->in1 = in1;
 436:	d3 83       	std	Z+3, r29	; 0x03
 438:	c2 83       	std	Z+2, r28	; 0x02
	descriptor->in2 = in2;
 43a:	f5 82       	std	Z+5, r15	; 0x05
 43c:	e4 82       	std	Z+4, r14	; 0x04

	return descriptor;
}
 43e:	df 91       	pop	r29
 440:	cf 91       	pop	r28
 442:	1f 91       	pop	r17
 444:	0f 91       	pop	r16
 446:	ff 90       	pop	r15
 448:	ef 90       	pop	r14
 44a:	08 95       	ret

0000044c <HBRIDGE_init>:

void HBRIDGE_init(HBridge *descriptor){
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	ec 01       	movw	r28, r24
	GPIO_set_mode(descriptor->en,GPIO_MODE_OUTPUT);
 452:	88 81       	ld	r24, Y
 454:	99 81       	ldd	r25, Y+1	; 0x01
 456:	60 e0       	ldi	r22, 0x00	; 0
 458:	0e 94 d6 01 	call	0x3ac	; 0x3ac <GPIO_set_mode>
	GPIO_set_mode(descriptor->in1,GPIO_MODE_OUTPUT);
 45c:	8a 81       	ldd	r24, Y+2	; 0x02
 45e:	9b 81       	ldd	r25, Y+3	; 0x03
 460:	60 e0       	ldi	r22, 0x00	; 0
 462:	0e 94 d6 01 	call	0x3ac	; 0x3ac <GPIO_set_mode>
	GPIO_set_mode(descriptor->in2,GPIO_MODE_OUTPUT);
 466:	8c 81       	ldd	r24, Y+4	; 0x04
 468:	9d 81       	ldd	r25, Y+5	; 0x05
 46a:	60 e0       	ldi	r22, 0x00	; 0
 46c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <GPIO_set_mode>
}
 470:	df 91       	pop	r29
 472:	cf 91       	pop	r28
 474:	08 95       	ret

00000476 <HBRIDGE_enable>:

void HBRIDGE_enable(HBridge *descriptor){
	GPIO_write(descriptor->en,GPIO_HIGH);
 476:	fc 01       	movw	r30, r24
 478:	80 81       	ld	r24, Z
 47a:	91 81       	ldd	r25, Z+1	; 0x01
 47c:	61 e0       	ldi	r22, 0x01	; 1
 47e:	0e 94 ed 01 	call	0x3da	; 0x3da <GPIO_write>
}
 482:	08 95       	ret

00000484 <HBRIDGE_disable>:

void HBRIDGE_disable(HBridge *descriptor){
	GPIO_write(descriptor->en,GPIO_LOW);
 484:	fc 01       	movw	r30, r24
 486:	80 81       	ld	r24, Z
 488:	91 81       	ldd	r25, Z+1	; 0x01
 48a:	60 e0       	ldi	r22, 0x00	; 0
 48c:	0e 94 ed 01 	call	0x3da	; 0x3da <GPIO_write>
}
 490:	08 95       	ret

00000492 <HBRIDGE_set_operation>:

void HBRIDGE_set_operation(HBridge *descriptor,HBridge_Operation operation){
 492:	1f 93       	push	r17
 494:	cf 93       	push	r28
 496:	df 93       	push	r29
 498:	ec 01       	movw	r28, r24
 49a:	63 30       	cpi	r22, 0x03	; 3
 49c:	50 f4       	brcc	.+20     	; 0x4b2 <HBRIDGE_set_operation+0x20>
 49e:	70 e0       	ldi	r23, 0x00	; 0
 4a0:	fb 01       	movw	r30, r22
 4a2:	e0 59       	subi	r30, 0x90	; 144
 4a4:	ff 4f       	sbci	r31, 0xFF	; 255
 4a6:	20 81       	ld	r18, Z
 4a8:	6d 58       	subi	r22, 0x8D	; 141
 4aa:	7f 4f       	sbci	r23, 0xFF	; 255
 4ac:	fb 01       	movw	r30, r22
 4ae:	10 81       	ld	r17, Z
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <HBRIDGE_set_operation+0x24>
 4b2:	10 e0       	ldi	r17, 0x00	; 0
 4b4:	20 e0       	ldi	r18, 0x00	; 0
		in1 = 1;
		in2 = 1;
		break;
	}

	GPIO_write(descriptor->in1,in1 ? GPIO_HIGH : GPIO_LOW);
 4b6:	8a 81       	ldd	r24, Y+2	; 0x02
 4b8:	9b 81       	ldd	r25, Y+3	; 0x03
 4ba:	61 e0       	ldi	r22, 0x01	; 1
 4bc:	22 23       	and	r18, r18
 4be:	09 f4       	brne	.+2      	; 0x4c2 <HBRIDGE_set_operation+0x30>
 4c0:	60 e0       	ldi	r22, 0x00	; 0
 4c2:	0e 94 ed 01 	call	0x3da	; 0x3da <GPIO_write>
	GPIO_write(descriptor->in2,in2 ? GPIO_HIGH : GPIO_LOW);
 4c6:	8c 81       	ldd	r24, Y+4	; 0x04
 4c8:	9d 81       	ldd	r25, Y+5	; 0x05
 4ca:	61 e0       	ldi	r22, 0x01	; 1
 4cc:	11 23       	and	r17, r17
 4ce:	09 f4       	brne	.+2      	; 0x4d2 <HBRIDGE_set_operation+0x40>
 4d0:	60 e0       	ldi	r22, 0x00	; 0
 4d2:	0e 94 ed 01 	call	0x3da	; 0x3da <GPIO_write>
}
 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	1f 91       	pop	r17
 4dc:	08 95       	ret

000004de <MOTOR_create>:
#include "motor.h"
#include <stdlib.h>
#define MAX_PWM_VALUE 255

Motor* MOTOR_create(HBridge *hbridge,void (*pwm)(uint8_t)){
 4de:	df 92       	push	r13
 4e0:	ef 92       	push	r14
 4e2:	ff 92       	push	r15
 4e4:	0f 93       	push	r16
 4e6:	1f 93       	push	r17
 4e8:	cf 93       	push	r28
 4ea:	df 93       	push	r29
 4ec:	ec 01       	movw	r28, r24
 4ee:	7b 01       	movw	r14, r22
	Motor *descriptor = malloc(sizeof(Motor));
 4f0:	85 e0       	ldi	r24, 0x05	; 5
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	0e 94 8d 03 	call	0x71a	; 0x71a <malloc>
 4f8:	d9 2e       	mov	r13, r25
 4fa:	08 2f       	mov	r16, r24
 4fc:	19 2f       	mov	r17, r25
	descriptor->hbridge = hbridge;
 4fe:	f8 01       	movw	r30, r16
 500:	d1 83       	std	Z+1, r29	; 0x01
 502:	c0 83       	st	Z, r28
	descriptor->speed = 0;
 504:	12 82       	std	Z+2, r1	; 0x02
	descriptor->pwm = pwm;
 506:	f4 82       	std	Z+4, r15	; 0x04
 508:	e3 82       	std	Z+3, r14	; 0x03

	HBRIDGE_init(hbridge);
 50a:	ce 01       	movw	r24, r28
 50c:	0e 94 26 02 	call	0x44c	; 0x44c <HBRIDGE_init>

	return descriptor;
}
 510:	80 2f       	mov	r24, r16
 512:	9d 2d       	mov	r25, r13
 514:	df 91       	pop	r29
 516:	cf 91       	pop	r28
 518:	1f 91       	pop	r17
 51a:	0f 91       	pop	r16
 51c:	ff 90       	pop	r15
 51e:	ef 90       	pop	r14
 520:	df 90       	pop	r13
 522:	08 95       	ret

00000524 <MOTOR_stop>:
void MOTOR_start(Motor *descriptor){
	MOTOR_reset_speed(descriptor);
}

void MOTOR_stop(Motor *descriptor){
	descriptor->pwm(0);
 524:	dc 01       	movw	r26, r24
 526:	13 96       	adiw	r26, 0x03	; 3
 528:	ed 91       	ld	r30, X+
 52a:	fc 91       	ld	r31, X
 52c:	14 97       	sbiw	r26, 0x04	; 4
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	09 95       	icall
}
 532:	08 95       	ret

00000534 <MOTOR_brake>:
		break;
	}
	MOTOR_reset_speed(descriptor);
}

void MOTOR_brake(Motor *descriptor){
 534:	cf 93       	push	r28
 536:	df 93       	push	r29
 538:	ec 01       	movw	r28, r24
	HBRIDGE_set_operation(descriptor->hbridge,HBRIDGE_OPERATION_BREAK);
 53a:	88 81       	ld	r24, Y
 53c:	99 81       	ldd	r25, Y+1	; 0x01
 53e:	62 e0       	ldi	r22, 0x02	; 2
 540:	0e 94 49 02 	call	0x492	; 0x492 <HBRIDGE_set_operation>
	descriptor->pwm(MAX_PWM_VALUE);
 544:	eb 81       	ldd	r30, Y+3	; 0x03
 546:	fc 81       	ldd	r31, Y+4	; 0x04
 548:	8f ef       	ldi	r24, 0xFF	; 255
 54a:	09 95       	icall
}
 54c:	df 91       	pop	r29
 54e:	cf 91       	pop	r28
 550:	08 95       	ret

00000552 <MOTOR_reset_speed>:
		speed = 100;
	descriptor->speed = speed;
	MOTOR_reset_speed(descriptor);
}

void MOTOR_reset_speed(Motor *descriptor){
 552:	fc 01       	movw	r30, r24
	uint8_t convertedSpeed = descriptor->speed*MAX_PWM_VALUE/100;
 554:	92 81       	ldd	r25, Z+2	; 0x02
 556:	8f ef       	ldi	r24, 0xFF	; 255
 558:	98 9f       	mul	r25, r24
 55a:	c0 01       	movw	r24, r0
 55c:	11 24       	eor	r1, r1
 55e:	64 e6       	ldi	r22, 0x64	; 100
 560:	70 e0       	ldi	r23, 0x00	; 0
 562:	0e 94 66 03 	call	0x6cc	; 0x6cc <__divmodhi4>
	descriptor->pwm(convertedSpeed);
 566:	03 80       	ldd	r0, Z+3	; 0x03
 568:	f4 81       	ldd	r31, Z+4	; 0x04
 56a:	e0 2d       	mov	r30, r0
 56c:	86 2f       	mov	r24, r22
 56e:	09 95       	icall
}
 570:	08 95       	ret

00000572 <MOTOR_set_speed>:
void MOTOR_set_speed(Motor *descriptor,uint8_t speed){
	if(speed < 0)
		speed = 0;
	if(speed > 100)
		speed = 100;
	descriptor->speed = speed;
 572:	65 36       	cpi	r22, 0x65	; 101
 574:	08 f0       	brcs	.+2      	; 0x578 <MOTOR_set_speed+0x6>
 576:	64 e6       	ldi	r22, 0x64	; 100
 578:	fc 01       	movw	r30, r24
 57a:	62 83       	std	Z+2, r22	; 0x02
	MOTOR_reset_speed(descriptor);
 57c:	0e 94 a9 02 	call	0x552	; 0x552 <MOTOR_reset_speed>
}
 580:	08 95       	ret

00000582 <MOTOR_set_direction>:

void MOTOR_stop(Motor *descriptor){
	descriptor->pwm(0);
}

void MOTOR_set_direction(Motor *descriptor,Motor_Direction direction){
 582:	cf 93       	push	r28
 584:	df 93       	push	r29
 586:	ec 01       	movw	r28, r24
	switch(direction){
 588:	66 23       	and	r22, r22
 58a:	19 f0       	breq	.+6      	; 0x592 <MOTOR_set_direction+0x10>
 58c:	61 30       	cpi	r22, 0x01	; 1
 58e:	51 f4       	brne	.+20     	; 0x5a4 <MOTOR_set_direction+0x22>
 590:	04 c0       	rjmp	.+8      	; 0x59a <MOTOR_set_direction+0x18>
	case MOTOR_DIRECTION_LEFT:
		HBRIDGE_set_operation(descriptor->hbridge,HBRIDGE_OPERATION_LEFT);
 592:	88 81       	ld	r24, Y
 594:	99 81       	ldd	r25, Y+1	; 0x01
 596:	60 e0       	ldi	r22, 0x00	; 0
 598:	03 c0       	rjmp	.+6      	; 0x5a0 <MOTOR_set_direction+0x1e>
		break;
	case MOTOR_DIRECTION_RIGHT:
		HBRIDGE_set_operation(descriptor->hbridge,HBRIDGE_OPERATION_RIGHT);
 59a:	88 81       	ld	r24, Y
 59c:	99 81       	ldd	r25, Y+1	; 0x01
 59e:	61 e0       	ldi	r22, 0x01	; 1
 5a0:	0e 94 49 02 	call	0x492	; 0x492 <HBRIDGE_set_operation>
		break;
	}
	MOTOR_reset_speed(descriptor);
 5a4:	ce 01       	movw	r24, r28
 5a6:	0e 94 a9 02 	call	0x552	; 0x552 <MOTOR_reset_speed>
}
 5aa:	df 91       	pop	r29
 5ac:	cf 91       	pop	r28
 5ae:	08 95       	ret

000005b0 <MOTOR_start>:

	return descriptor;
}

void MOTOR_start(Motor *descriptor){
	MOTOR_reset_speed(descriptor);
 5b0:	0e 94 a9 02 	call	0x552	; 0x552 <MOTOR_reset_speed>
}
 5b4:	08 95       	ret

000005b6 <pwm_0_set>:
#include <avr/io.h>
#include "pwm.h"
#include "utils.h"

void pwm_0_set(uint8_t time_on){
 5b6:	1f 93       	push	r17
 5b8:	18 2f       	mov	r17, r24
	// set timer0 for fast pwm
	bit_set_1(&TCCR0,WGM00);
 5ba:	83 e5       	ldi	r24, 0x53	; 83
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	66 e0       	ldi	r22, 0x06	; 6
 5c0:	0e 94 41 03 	call	0x682	; 0x682 <bit_set_1>
	bit_set_1(&TCCR0,WGM01);
 5c4:	83 e5       	ldi	r24, 0x53	; 83
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	63 e0       	ldi	r22, 0x03	; 3
 5ca:	0e 94 41 03 	call	0x682	; 0x682 <bit_set_1>

	// set clear on compare match and set on top
	bit_set_1(&TCCR0,COM01);
 5ce:	83 e5       	ldi	r24, 0x53	; 83
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	65 e0       	ldi	r22, 0x05	; 5
 5d4:	0e 94 41 03 	call	0x682	; 0x682 <bit_set_1>

	// set prescaler 256
	bit_set_1(&TCCR0,CS02);
 5d8:	83 e5       	ldi	r24, 0x53	; 83
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	62 e0       	ldi	r22, 0x02	; 2
 5de:	0e 94 41 03 	call	0x682	; 0x682 <bit_set_1>

	bit_set_1(&DDRB,PB3);
 5e2:	87 e3       	ldi	r24, 0x37	; 55
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	63 e0       	ldi	r22, 0x03	; 3
 5e8:	0e 94 41 03 	call	0x682	; 0x682 <bit_set_1>

	// set compare value
	OCR0 = time_on;
 5ec:	1c bf       	out	0x3c, r17	; 60

	// reset counter
	TCNT0 = 0;
 5ee:	12 be       	out	0x32, r1	; 50
}
 5f0:	1f 91       	pop	r17
 5f2:	08 95       	ret

000005f4 <pwm_2_set>:

void pwm_2_set(uint8_t time_on){
 5f4:	1f 93       	push	r17
 5f6:	18 2f       	mov	r17, r24

	// set timer2 for fast pwm
	bit_set_1(&TCCR2,WGM20);
 5f8:	85 e4       	ldi	r24, 0x45	; 69
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	66 e0       	ldi	r22, 0x06	; 6
 5fe:	0e 94 41 03 	call	0x682	; 0x682 <bit_set_1>
	bit_set_1(&TCCR2,WGM21);
 602:	85 e4       	ldi	r24, 0x45	; 69
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	63 e0       	ldi	r22, 0x03	; 3
 608:	0e 94 41 03 	call	0x682	; 0x682 <bit_set_1>

	// set clear on compare match and set on top
	bit_set_1(&TCCR2,COM21);
 60c:	85 e4       	ldi	r24, 0x45	; 69
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	65 e0       	ldi	r22, 0x05	; 5
 612:	0e 94 41 03 	call	0x682	; 0x682 <bit_set_1>

	// set prescaler 256
	bit_set_1(&TCCR2,CS21);
 616:	85 e4       	ldi	r24, 0x45	; 69
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	61 e0       	ldi	r22, 0x01	; 1
 61c:	0e 94 41 03 	call	0x682	; 0x682 <bit_set_1>
	bit_set_1(&TCCR2,CS22);
 620:	85 e4       	ldi	r24, 0x45	; 69
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	62 e0       	ldi	r22, 0x02	; 2
 626:	0e 94 41 03 	call	0x682	; 0x682 <bit_set_1>

	bit_set_1(&DDRD,PD7);
 62a:	81 e3       	ldi	r24, 0x31	; 49
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	67 e0       	ldi	r22, 0x07	; 7
 630:	0e 94 41 03 	call	0x682	; 0x682 <bit_set_1>

	// set compare value
	OCR2 = time_on;
 634:	13 bd       	out	0x23, r17	; 35

	// reset counter
	TCNT2 = 0;
 636:	14 bc       	out	0x24, r1	; 36
}
 638:	1f 91       	pop	r17
 63a:	08 95       	ret

0000063c <uart_PutChar>:
	#endif
	  UCSRB = _BV(TXEN) | _BV(RXEN); /* tx/rx enable */
}

int uart_PutChar(char c, FILE *stream)
{
 63c:	1f 93       	push	r17
 63e:	18 2f       	mov	r17, r24
	if (c == '\n')
 640:	8a 30       	cpi	r24, 0x0A	; 10
 642:	19 f4       	brne	.+6      	; 0x64a <uart_PutChar+0xe>
		uart_PutChar('\r', stream);
 644:	8d e0       	ldi	r24, 0x0D	; 13
 646:	0e 94 1e 03 	call	0x63c	; 0x63c <uart_PutChar>
	
	while (~UCSRA & (1 << UDRE));
 64a:	5d 9b       	sbis	0x0b, 5	; 11
 64c:	fe cf       	rjmp	.-4      	; 0x64a <uart_PutChar+0xe>
	UDR = c;
 64e:	1c b9       	out	0x0c, r17	; 12


	return 0;
}
 650:	80 e0       	ldi	r24, 0x00	; 0
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	1f 91       	pop	r17
 656:	08 95       	ret

00000658 <uart_ReadChar>:

char uart_ReadChar()
{
   //Wait untill a data is available
   while(!(UCSRA & (1<<RXC)))
 658:	5f 9b       	sbis	0x0b, 7	; 11
 65a:	fe cf       	rjmp	.-4      	; 0x658 <uart_ReadChar>
   }

   //Now USART has got data from host
   //and is available is buffer

   return UDR;
 65c:	8c b1       	in	r24, 0x0c	; 12
}
 65e:	08 95       	ret

00000660 <uart_stdio_Init>:
FILE uart_output = FDEV_SETUP_STREAM(uart_PutChar, NULL, _FDEV_SETUP_WRITE);
FILE uart_input = FDEV_SETUP_STREAM(NULL, uart_ReadChar, _FDEV_SETUP_READ);

void uart_stdio_Init(void)
{
	stdout = &uart_output;
 660:	86 e7       	ldi	r24, 0x76	; 118
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	90 93 a1 00 	sts	0x00A1, r25
 668:	80 93 a0 00 	sts	0x00A0, r24
	stdin = &uart_input;
 66c:	84 e8       	ldi	r24, 0x84	; 132
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	90 93 9f 00 	sts	0x009F, r25
 674:	80 93 9e 00 	sts	0x009E, r24

	#if F_CPU < 2000000UL && defined(U2X)
	  UCSRA = _BV(U2X);             /* improve baud rate error by using 2x clk */
	  UBRRL = (F_CPU / (8UL * UART_BAUD)) - 1;
	#else
	  UBRRL = (F_CPU / (16UL * UART_BAUD)) - 1;
 678:	83 e3       	ldi	r24, 0x33	; 51
 67a:	89 b9       	out	0x09, r24	; 9
	#endif
	  UCSRB = _BV(TXEN) | _BV(RXEN); /* tx/rx enable */
 67c:	88 e1       	ldi	r24, 0x18	; 24
 67e:	8a b9       	out	0x0a, r24	; 10
}
 680:	08 95       	ret

00000682 <bit_set_1>:
#include "utils.h"

void bit_set_1(volatile uint8_t *ref,uint8_t bit){
 682:	fc 01       	movw	r30, r24
	*ref |= 1 << bit;
 684:	20 81       	ld	r18, Z
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	02 c0       	rjmp	.+4      	; 0x690 <bit_set_1+0xe>
 68c:	88 0f       	add	r24, r24
 68e:	99 1f       	adc	r25, r25
 690:	6a 95       	dec	r22
 692:	e2 f7       	brpl	.-8      	; 0x68c <bit_set_1+0xa>
 694:	28 2b       	or	r18, r24
 696:	20 83       	st	Z, r18
}
 698:	08 95       	ret

0000069a <bit_set_0>:

void bit_set_0(volatile uint8_t *ref,uint8_t bit){
 69a:	fc 01       	movw	r30, r24
	*ref = ~((~(*ref)) | (1 << bit));
 69c:	20 81       	ld	r18, Z
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <bit_set_0+0xe>
 6a4:	88 0f       	add	r24, r24
 6a6:	99 1f       	adc	r25, r25
 6a8:	6a 95       	dec	r22
 6aa:	e2 f7       	brpl	.-8      	; 0x6a4 <bit_set_0+0xa>
 6ac:	80 95       	com	r24
 6ae:	82 23       	and	r24, r18
 6b0:	80 83       	st	Z, r24
}
 6b2:	08 95       	ret

000006b4 <bit_toggle>:

void bit_toggle(volatile uint8_t *ref,uint8_t bit){
 6b4:	fc 01       	movw	r30, r24
	*ref ^= (1 << bit);
 6b6:	20 81       	ld	r18, Z
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <bit_toggle+0xe>
 6be:	88 0f       	add	r24, r24
 6c0:	99 1f       	adc	r25, r25
 6c2:	6a 95       	dec	r22
 6c4:	e2 f7       	brpl	.-8      	; 0x6be <bit_toggle+0xa>
 6c6:	28 27       	eor	r18, r24
 6c8:	20 83       	st	Z, r18
}
 6ca:	08 95       	ret

000006cc <__divmodhi4>:
 6cc:	97 fb       	bst	r25, 7
 6ce:	09 2e       	mov	r0, r25
 6d0:	07 26       	eor	r0, r23
 6d2:	0a d0       	rcall	.+20     	; 0x6e8 <__divmodhi4_neg1>
 6d4:	77 fd       	sbrc	r23, 7
 6d6:	04 d0       	rcall	.+8      	; 0x6e0 <__divmodhi4_neg2>
 6d8:	0c d0       	rcall	.+24     	; 0x6f2 <__udivmodhi4>
 6da:	06 d0       	rcall	.+12     	; 0x6e8 <__divmodhi4_neg1>
 6dc:	00 20       	and	r0, r0
 6de:	1a f4       	brpl	.+6      	; 0x6e6 <__divmodhi4_exit>

000006e0 <__divmodhi4_neg2>:
 6e0:	70 95       	com	r23
 6e2:	61 95       	neg	r22
 6e4:	7f 4f       	sbci	r23, 0xFF	; 255

000006e6 <__divmodhi4_exit>:
 6e6:	08 95       	ret

000006e8 <__divmodhi4_neg1>:
 6e8:	f6 f7       	brtc	.-4      	; 0x6e6 <__divmodhi4_exit>
 6ea:	90 95       	com	r25
 6ec:	81 95       	neg	r24
 6ee:	9f 4f       	sbci	r25, 0xFF	; 255
 6f0:	08 95       	ret

000006f2 <__udivmodhi4>:
 6f2:	aa 1b       	sub	r26, r26
 6f4:	bb 1b       	sub	r27, r27
 6f6:	51 e1       	ldi	r21, 0x11	; 17
 6f8:	07 c0       	rjmp	.+14     	; 0x708 <__udivmodhi4_ep>

000006fa <__udivmodhi4_loop>:
 6fa:	aa 1f       	adc	r26, r26
 6fc:	bb 1f       	adc	r27, r27
 6fe:	a6 17       	cp	r26, r22
 700:	b7 07       	cpc	r27, r23
 702:	10 f0       	brcs	.+4      	; 0x708 <__udivmodhi4_ep>
 704:	a6 1b       	sub	r26, r22
 706:	b7 0b       	sbc	r27, r23

00000708 <__udivmodhi4_ep>:
 708:	88 1f       	adc	r24, r24
 70a:	99 1f       	adc	r25, r25
 70c:	5a 95       	dec	r21
 70e:	a9 f7       	brne	.-22     	; 0x6fa <__udivmodhi4_loop>
 710:	80 95       	com	r24
 712:	90 95       	com	r25
 714:	bc 01       	movw	r22, r24
 716:	cd 01       	movw	r24, r26
 718:	08 95       	ret

0000071a <malloc>:
 71a:	cf 93       	push	r28
 71c:	df 93       	push	r29
 71e:	82 30       	cpi	r24, 0x02	; 2
 720:	91 05       	cpc	r25, r1
 722:	10 f4       	brcc	.+4      	; 0x728 <malloc+0xe>
 724:	82 e0       	ldi	r24, 0x02	; 2
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	e0 91 9c 00 	lds	r30, 0x009C
 72c:	f0 91 9d 00 	lds	r31, 0x009D
 730:	40 e0       	ldi	r20, 0x00	; 0
 732:	50 e0       	ldi	r21, 0x00	; 0
 734:	20 e0       	ldi	r18, 0x00	; 0
 736:	30 e0       	ldi	r19, 0x00	; 0
 738:	26 c0       	rjmp	.+76     	; 0x786 <malloc+0x6c>
 73a:	60 81       	ld	r22, Z
 73c:	71 81       	ldd	r23, Z+1	; 0x01
 73e:	68 17       	cp	r22, r24
 740:	79 07       	cpc	r23, r25
 742:	e0 f0       	brcs	.+56     	; 0x77c <malloc+0x62>
 744:	68 17       	cp	r22, r24
 746:	79 07       	cpc	r23, r25
 748:	81 f4       	brne	.+32     	; 0x76a <malloc+0x50>
 74a:	82 81       	ldd	r24, Z+2	; 0x02
 74c:	93 81       	ldd	r25, Z+3	; 0x03
 74e:	21 15       	cp	r18, r1
 750:	31 05       	cpc	r19, r1
 752:	31 f0       	breq	.+12     	; 0x760 <malloc+0x46>
 754:	d9 01       	movw	r26, r18
 756:	13 96       	adiw	r26, 0x03	; 3
 758:	9c 93       	st	X, r25
 75a:	8e 93       	st	-X, r24
 75c:	12 97       	sbiw	r26, 0x02	; 2
 75e:	2b c0       	rjmp	.+86     	; 0x7b6 <malloc+0x9c>
 760:	90 93 9d 00 	sts	0x009D, r25
 764:	80 93 9c 00 	sts	0x009C, r24
 768:	26 c0       	rjmp	.+76     	; 0x7b6 <malloc+0x9c>
 76a:	41 15       	cp	r20, r1
 76c:	51 05       	cpc	r21, r1
 76e:	19 f0       	breq	.+6      	; 0x776 <malloc+0x5c>
 770:	64 17       	cp	r22, r20
 772:	75 07       	cpc	r23, r21
 774:	18 f4       	brcc	.+6      	; 0x77c <malloc+0x62>
 776:	ab 01       	movw	r20, r22
 778:	e9 01       	movw	r28, r18
 77a:	df 01       	movw	r26, r30
 77c:	9f 01       	movw	r18, r30
 77e:	72 81       	ldd	r23, Z+2	; 0x02
 780:	63 81       	ldd	r22, Z+3	; 0x03
 782:	e7 2f       	mov	r30, r23
 784:	f6 2f       	mov	r31, r22
 786:	30 97       	sbiw	r30, 0x00	; 0
 788:	c1 f6       	brne	.-80     	; 0x73a <malloc+0x20>
 78a:	41 15       	cp	r20, r1
 78c:	51 05       	cpc	r21, r1
 78e:	01 f1       	breq	.+64     	; 0x7d0 <malloc+0xb6>
 790:	48 1b       	sub	r20, r24
 792:	59 0b       	sbc	r21, r25
 794:	44 30       	cpi	r20, 0x04	; 4
 796:	51 05       	cpc	r21, r1
 798:	80 f4       	brcc	.+32     	; 0x7ba <malloc+0xa0>
 79a:	12 96       	adiw	r26, 0x02	; 2
 79c:	8d 91       	ld	r24, X+
 79e:	9c 91       	ld	r25, X
 7a0:	13 97       	sbiw	r26, 0x03	; 3
 7a2:	20 97       	sbiw	r28, 0x00	; 0
 7a4:	19 f0       	breq	.+6      	; 0x7ac <malloc+0x92>
 7a6:	9b 83       	std	Y+3, r25	; 0x03
 7a8:	8a 83       	std	Y+2, r24	; 0x02
 7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <malloc+0x9a>
 7ac:	90 93 9d 00 	sts	0x009D, r25
 7b0:	80 93 9c 00 	sts	0x009C, r24
 7b4:	fd 01       	movw	r30, r26
 7b6:	32 96       	adiw	r30, 0x02	; 2
 7b8:	46 c0       	rjmp	.+140    	; 0x846 <malloc+0x12c>
 7ba:	fd 01       	movw	r30, r26
 7bc:	e4 0f       	add	r30, r20
 7be:	f5 1f       	adc	r31, r21
 7c0:	81 93       	st	Z+, r24
 7c2:	91 93       	st	Z+, r25
 7c4:	42 50       	subi	r20, 0x02	; 2
 7c6:	50 40       	sbci	r21, 0x00	; 0
 7c8:	11 96       	adiw	r26, 0x01	; 1
 7ca:	5c 93       	st	X, r21
 7cc:	4e 93       	st	-X, r20
 7ce:	3b c0       	rjmp	.+118    	; 0x846 <malloc+0x12c>
 7d0:	20 91 9a 00 	lds	r18, 0x009A
 7d4:	30 91 9b 00 	lds	r19, 0x009B
 7d8:	21 15       	cp	r18, r1
 7da:	31 05       	cpc	r19, r1
 7dc:	41 f4       	brne	.+16     	; 0x7ee <malloc+0xd4>
 7de:	20 91 94 00 	lds	r18, 0x0094
 7e2:	30 91 95 00 	lds	r19, 0x0095
 7e6:	30 93 9b 00 	sts	0x009B, r19
 7ea:	20 93 9a 00 	sts	0x009A, r18
 7ee:	20 91 96 00 	lds	r18, 0x0096
 7f2:	30 91 97 00 	lds	r19, 0x0097
 7f6:	21 15       	cp	r18, r1
 7f8:	31 05       	cpc	r19, r1
 7fa:	41 f4       	brne	.+16     	; 0x80c <malloc+0xf2>
 7fc:	2d b7       	in	r18, 0x3d	; 61
 7fe:	3e b7       	in	r19, 0x3e	; 62
 800:	40 91 92 00 	lds	r20, 0x0092
 804:	50 91 93 00 	lds	r21, 0x0093
 808:	24 1b       	sub	r18, r20
 80a:	35 0b       	sbc	r19, r21
 80c:	e0 91 9a 00 	lds	r30, 0x009A
 810:	f0 91 9b 00 	lds	r31, 0x009B
 814:	e2 17       	cp	r30, r18
 816:	f3 07       	cpc	r31, r19
 818:	a0 f4       	brcc	.+40     	; 0x842 <malloc+0x128>
 81a:	2e 1b       	sub	r18, r30
 81c:	3f 0b       	sbc	r19, r31
 81e:	28 17       	cp	r18, r24
 820:	39 07       	cpc	r19, r25
 822:	78 f0       	brcs	.+30     	; 0x842 <malloc+0x128>
 824:	ac 01       	movw	r20, r24
 826:	4e 5f       	subi	r20, 0xFE	; 254
 828:	5f 4f       	sbci	r21, 0xFF	; 255
 82a:	24 17       	cp	r18, r20
 82c:	35 07       	cpc	r19, r21
 82e:	48 f0       	brcs	.+18     	; 0x842 <malloc+0x128>
 830:	4e 0f       	add	r20, r30
 832:	5f 1f       	adc	r21, r31
 834:	50 93 9b 00 	sts	0x009B, r21
 838:	40 93 9a 00 	sts	0x009A, r20
 83c:	81 93       	st	Z+, r24
 83e:	91 93       	st	Z+, r25
 840:	02 c0       	rjmp	.+4      	; 0x846 <malloc+0x12c>
 842:	e0 e0       	ldi	r30, 0x00	; 0
 844:	f0 e0       	ldi	r31, 0x00	; 0
 846:	cf 01       	movw	r24, r30
 848:	df 91       	pop	r29
 84a:	cf 91       	pop	r28
 84c:	08 95       	ret

0000084e <free>:
 84e:	cf 93       	push	r28
 850:	df 93       	push	r29
 852:	00 97       	sbiw	r24, 0x00	; 0
 854:	09 f4       	brne	.+2      	; 0x858 <free+0xa>
 856:	91 c0       	rjmp	.+290    	; 0x97a <__stack+0x11b>
 858:	fc 01       	movw	r30, r24
 85a:	32 97       	sbiw	r30, 0x02	; 2
 85c:	13 82       	std	Z+3, r1	; 0x03
 85e:	12 82       	std	Z+2, r1	; 0x02
 860:	60 91 9c 00 	lds	r22, 0x009C
 864:	70 91 9d 00 	lds	r23, 0x009D
 868:	61 15       	cp	r22, r1
 86a:	71 05       	cpc	r23, r1
 86c:	81 f4       	brne	.+32     	; 0x88e <__stack+0x2f>
 86e:	20 81       	ld	r18, Z
 870:	31 81       	ldd	r19, Z+1	; 0x01
 872:	28 0f       	add	r18, r24
 874:	39 1f       	adc	r19, r25
 876:	80 91 9a 00 	lds	r24, 0x009A
 87a:	90 91 9b 00 	lds	r25, 0x009B
 87e:	82 17       	cp	r24, r18
 880:	93 07       	cpc	r25, r19
 882:	99 f5       	brne	.+102    	; 0x8ea <__stack+0x8b>
 884:	f0 93 9b 00 	sts	0x009B, r31
 888:	e0 93 9a 00 	sts	0x009A, r30
 88c:	76 c0       	rjmp	.+236    	; 0x97a <__stack+0x11b>
 88e:	db 01       	movw	r26, r22
 890:	80 e0       	ldi	r24, 0x00	; 0
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	02 c0       	rjmp	.+4      	; 0x89a <__stack+0x3b>
 896:	cd 01       	movw	r24, r26
 898:	d9 01       	movw	r26, r18
 89a:	ae 17       	cp	r26, r30
 89c:	bf 07       	cpc	r27, r31
 89e:	48 f4       	brcc	.+18     	; 0x8b2 <__stack+0x53>
 8a0:	12 96       	adiw	r26, 0x02	; 2
 8a2:	2d 91       	ld	r18, X+
 8a4:	3c 91       	ld	r19, X
 8a6:	13 97       	sbiw	r26, 0x03	; 3
 8a8:	21 15       	cp	r18, r1
 8aa:	31 05       	cpc	r19, r1
 8ac:	a1 f7       	brne	.-24     	; 0x896 <__stack+0x37>
 8ae:	cd 01       	movw	r24, r26
 8b0:	21 c0       	rjmp	.+66     	; 0x8f4 <__stack+0x95>
 8b2:	b3 83       	std	Z+3, r27	; 0x03
 8b4:	a2 83       	std	Z+2, r26	; 0x02
 8b6:	ef 01       	movw	r28, r30
 8b8:	49 91       	ld	r20, Y+
 8ba:	59 91       	ld	r21, Y+
 8bc:	9e 01       	movw	r18, r28
 8be:	24 0f       	add	r18, r20
 8c0:	35 1f       	adc	r19, r21
 8c2:	a2 17       	cp	r26, r18
 8c4:	b3 07       	cpc	r27, r19
 8c6:	79 f4       	brne	.+30     	; 0x8e6 <__stack+0x87>
 8c8:	2d 91       	ld	r18, X+
 8ca:	3c 91       	ld	r19, X
 8cc:	11 97       	sbiw	r26, 0x01	; 1
 8ce:	24 0f       	add	r18, r20
 8d0:	35 1f       	adc	r19, r21
 8d2:	2e 5f       	subi	r18, 0xFE	; 254
 8d4:	3f 4f       	sbci	r19, 0xFF	; 255
 8d6:	31 83       	std	Z+1, r19	; 0x01
 8d8:	20 83       	st	Z, r18
 8da:	12 96       	adiw	r26, 0x02	; 2
 8dc:	2d 91       	ld	r18, X+
 8de:	3c 91       	ld	r19, X
 8e0:	13 97       	sbiw	r26, 0x03	; 3
 8e2:	33 83       	std	Z+3, r19	; 0x03
 8e4:	22 83       	std	Z+2, r18	; 0x02
 8e6:	00 97       	sbiw	r24, 0x00	; 0
 8e8:	29 f4       	brne	.+10     	; 0x8f4 <__stack+0x95>
 8ea:	f0 93 9d 00 	sts	0x009D, r31
 8ee:	e0 93 9c 00 	sts	0x009C, r30
 8f2:	43 c0       	rjmp	.+134    	; 0x97a <__stack+0x11b>
 8f4:	dc 01       	movw	r26, r24
 8f6:	13 96       	adiw	r26, 0x03	; 3
 8f8:	fc 93       	st	X, r31
 8fa:	ee 93       	st	-X, r30
 8fc:	12 97       	sbiw	r26, 0x02	; 2
 8fe:	4d 91       	ld	r20, X+
 900:	5d 91       	ld	r21, X+
 902:	a4 0f       	add	r26, r20
 904:	b5 1f       	adc	r27, r21
 906:	ea 17       	cp	r30, r26
 908:	fb 07       	cpc	r31, r27
 90a:	69 f4       	brne	.+26     	; 0x926 <__stack+0xc7>
 90c:	20 81       	ld	r18, Z
 90e:	31 81       	ldd	r19, Z+1	; 0x01
 910:	24 0f       	add	r18, r20
 912:	35 1f       	adc	r19, r21
 914:	2e 5f       	subi	r18, 0xFE	; 254
 916:	3f 4f       	sbci	r19, 0xFF	; 255
 918:	ec 01       	movw	r28, r24
 91a:	39 83       	std	Y+1, r19	; 0x01
 91c:	28 83       	st	Y, r18
 91e:	22 81       	ldd	r18, Z+2	; 0x02
 920:	33 81       	ldd	r19, Z+3	; 0x03
 922:	3b 83       	std	Y+3, r19	; 0x03
 924:	2a 83       	std	Y+2, r18	; 0x02
 926:	e0 e0       	ldi	r30, 0x00	; 0
 928:	f0 e0       	ldi	r31, 0x00	; 0
 92a:	02 c0       	rjmp	.+4      	; 0x930 <__stack+0xd1>
 92c:	fb 01       	movw	r30, r22
 92e:	bc 01       	movw	r22, r24
 930:	db 01       	movw	r26, r22
 932:	12 96       	adiw	r26, 0x02	; 2
 934:	8d 91       	ld	r24, X+
 936:	9c 91       	ld	r25, X
 938:	13 97       	sbiw	r26, 0x03	; 3
 93a:	00 97       	sbiw	r24, 0x00	; 0
 93c:	b9 f7       	brne	.-18     	; 0x92c <__stack+0xcd>
 93e:	9b 01       	movw	r18, r22
 940:	2e 5f       	subi	r18, 0xFE	; 254
 942:	3f 4f       	sbci	r19, 0xFF	; 255
 944:	8d 91       	ld	r24, X+
 946:	9c 91       	ld	r25, X
 948:	11 97       	sbiw	r26, 0x01	; 1
 94a:	82 0f       	add	r24, r18
 94c:	93 1f       	adc	r25, r19
 94e:	40 91 9a 00 	lds	r20, 0x009A
 952:	50 91 9b 00 	lds	r21, 0x009B
 956:	48 17       	cp	r20, r24
 958:	59 07       	cpc	r21, r25
 95a:	79 f4       	brne	.+30     	; 0x97a <__stack+0x11b>
 95c:	30 97       	sbiw	r30, 0x00	; 0
 95e:	29 f4       	brne	.+10     	; 0x96a <__stack+0x10b>
 960:	10 92 9d 00 	sts	0x009D, r1
 964:	10 92 9c 00 	sts	0x009C, r1
 968:	02 c0       	rjmp	.+4      	; 0x96e <__stack+0x10f>
 96a:	13 82       	std	Z+3, r1	; 0x03
 96c:	12 82       	std	Z+2, r1	; 0x02
 96e:	22 50       	subi	r18, 0x02	; 2
 970:	30 40       	sbci	r19, 0x00	; 0
 972:	30 93 9b 00 	sts	0x009B, r19
 976:	20 93 9a 00 	sts	0x009A, r18
 97a:	df 91       	pop	r29
 97c:	cf 91       	pop	r28
 97e:	08 95       	ret

00000980 <fgetc>:
 980:	cf 93       	push	r28
 982:	df 93       	push	r29
 984:	ec 01       	movw	r28, r24
 986:	3b 81       	ldd	r19, Y+3	; 0x03
 988:	30 ff       	sbrs	r19, 0
 98a:	36 c0       	rjmp	.+108    	; 0x9f8 <fgetc+0x78>
 98c:	36 ff       	sbrs	r19, 6
 98e:	09 c0       	rjmp	.+18     	; 0x9a2 <fgetc+0x22>
 990:	3f 7b       	andi	r19, 0xBF	; 191
 992:	3b 83       	std	Y+3, r19	; 0x03
 994:	8e 81       	ldd	r24, Y+6	; 0x06
 996:	9f 81       	ldd	r25, Y+7	; 0x07
 998:	01 96       	adiw	r24, 0x01	; 1
 99a:	9f 83       	std	Y+7, r25	; 0x07
 99c:	8e 83       	std	Y+6, r24	; 0x06
 99e:	2a 81       	ldd	r18, Y+2	; 0x02
 9a0:	29 c0       	rjmp	.+82     	; 0x9f4 <fgetc+0x74>
 9a2:	32 ff       	sbrs	r19, 2
 9a4:	0f c0       	rjmp	.+30     	; 0x9c4 <fgetc+0x44>
 9a6:	e8 81       	ld	r30, Y
 9a8:	f9 81       	ldd	r31, Y+1	; 0x01
 9aa:	80 81       	ld	r24, Z
 9ac:	99 27       	eor	r25, r25
 9ae:	87 fd       	sbrc	r24, 7
 9b0:	90 95       	com	r25
 9b2:	00 97       	sbiw	r24, 0x00	; 0
 9b4:	19 f4       	brne	.+6      	; 0x9bc <fgetc+0x3c>
 9b6:	30 62       	ori	r19, 0x20	; 32
 9b8:	3b 83       	std	Y+3, r19	; 0x03
 9ba:	1e c0       	rjmp	.+60     	; 0x9f8 <fgetc+0x78>
 9bc:	31 96       	adiw	r30, 0x01	; 1
 9be:	f9 83       	std	Y+1, r31	; 0x01
 9c0:	e8 83       	st	Y, r30
 9c2:	11 c0       	rjmp	.+34     	; 0x9e6 <fgetc+0x66>
 9c4:	ea 85       	ldd	r30, Y+10	; 0x0a
 9c6:	fb 85       	ldd	r31, Y+11	; 0x0b
 9c8:	ce 01       	movw	r24, r28
 9ca:	09 95       	icall
 9cc:	97 ff       	sbrs	r25, 7
 9ce:	0b c0       	rjmp	.+22     	; 0x9e6 <fgetc+0x66>
 9d0:	2b 81       	ldd	r18, Y+3	; 0x03
 9d2:	3f ef       	ldi	r19, 0xFF	; 255
 9d4:	8f 3f       	cpi	r24, 0xFF	; 255
 9d6:	93 07       	cpc	r25, r19
 9d8:	11 f4       	brne	.+4      	; 0x9de <fgetc+0x5e>
 9da:	80 e1       	ldi	r24, 0x10	; 16
 9dc:	01 c0       	rjmp	.+2      	; 0x9e0 <fgetc+0x60>
 9de:	80 e2       	ldi	r24, 0x20	; 32
 9e0:	82 2b       	or	r24, r18
 9e2:	8b 83       	std	Y+3, r24	; 0x03
 9e4:	09 c0       	rjmp	.+18     	; 0x9f8 <fgetc+0x78>
 9e6:	2e 81       	ldd	r18, Y+6	; 0x06
 9e8:	3f 81       	ldd	r19, Y+7	; 0x07
 9ea:	2f 5f       	subi	r18, 0xFF	; 255
 9ec:	3f 4f       	sbci	r19, 0xFF	; 255
 9ee:	3f 83       	std	Y+7, r19	; 0x07
 9f0:	2e 83       	std	Y+6, r18	; 0x06
 9f2:	28 2f       	mov	r18, r24
 9f4:	30 e0       	ldi	r19, 0x00	; 0
 9f6:	02 c0       	rjmp	.+4      	; 0x9fc <fgetc+0x7c>
 9f8:	2f ef       	ldi	r18, 0xFF	; 255
 9fa:	3f ef       	ldi	r19, 0xFF	; 255
 9fc:	c9 01       	movw	r24, r18
 9fe:	df 91       	pop	r29
 a00:	cf 91       	pop	r28
 a02:	08 95       	ret

00000a04 <printf>:
 a04:	a0 e0       	ldi	r26, 0x00	; 0
 a06:	b0 e0       	ldi	r27, 0x00	; 0
 a08:	e8 e0       	ldi	r30, 0x08	; 8
 a0a:	f5 e0       	ldi	r31, 0x05	; 5
 a0c:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <__prologue_saves__+0x20>
 a10:	fe 01       	movw	r30, r28
 a12:	35 96       	adiw	r30, 0x05	; 5
 a14:	61 91       	ld	r22, Z+
 a16:	71 91       	ld	r23, Z+
 a18:	80 91 a0 00 	lds	r24, 0x00A0
 a1c:	90 91 a1 00 	lds	r25, 0x00A1
 a20:	af 01       	movw	r20, r30
 a22:	0e 94 17 05 	call	0xa2e	; 0xa2e <vfprintf>
 a26:	20 96       	adiw	r28, 0x00	; 0
 a28:	e2 e0       	ldi	r30, 0x02	; 2
 a2a:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <__epilogue_restores__+0x20>

00000a2e <vfprintf>:
 a2e:	ac e0       	ldi	r26, 0x0C	; 12
 a30:	b0 e0       	ldi	r27, 0x00	; 0
 a32:	ed e1       	ldi	r30, 0x1D	; 29
 a34:	f5 e0       	ldi	r31, 0x05	; 5
 a36:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__prologue_saves__>
 a3a:	6c 01       	movw	r12, r24
 a3c:	1b 01       	movw	r2, r22
 a3e:	8a 01       	movw	r16, r20
 a40:	fc 01       	movw	r30, r24
 a42:	17 82       	std	Z+7, r1	; 0x07
 a44:	16 82       	std	Z+6, r1	; 0x06
 a46:	83 81       	ldd	r24, Z+3	; 0x03
 a48:	81 ff       	sbrs	r24, 1
 a4a:	d1 c1       	rjmp	.+930    	; 0xdee <vfprintf+0x3c0>
 a4c:	2e 01       	movw	r4, r28
 a4e:	08 94       	sec
 a50:	41 1c       	adc	r4, r1
 a52:	51 1c       	adc	r5, r1
 a54:	f6 01       	movw	r30, r12
 a56:	93 81       	ldd	r25, Z+3	; 0x03
 a58:	f1 01       	movw	r30, r2
 a5a:	93 fd       	sbrc	r25, 3
 a5c:	85 91       	lpm	r24, Z+
 a5e:	93 ff       	sbrs	r25, 3
 a60:	81 91       	ld	r24, Z+
 a62:	1f 01       	movw	r2, r30
 a64:	88 23       	and	r24, r24
 a66:	09 f4       	brne	.+2      	; 0xa6a <vfprintf+0x3c>
 a68:	be c1       	rjmp	.+892    	; 0xde6 <vfprintf+0x3b8>
 a6a:	85 32       	cpi	r24, 0x25	; 37
 a6c:	39 f4       	brne	.+14     	; 0xa7c <vfprintf+0x4e>
 a6e:	93 fd       	sbrc	r25, 3
 a70:	85 91       	lpm	r24, Z+
 a72:	93 ff       	sbrs	r25, 3
 a74:	81 91       	ld	r24, Z+
 a76:	1f 01       	movw	r2, r30
 a78:	85 32       	cpi	r24, 0x25	; 37
 a7a:	29 f4       	brne	.+10     	; 0xa86 <vfprintf+0x58>
 a7c:	90 e0       	ldi	r25, 0x00	; 0
 a7e:	b6 01       	movw	r22, r12
 a80:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 a84:	e7 cf       	rjmp	.-50     	; 0xa54 <vfprintf+0x26>
 a86:	ee 24       	eor	r14, r14
 a88:	ff 24       	eor	r15, r15
 a8a:	20 e0       	ldi	r18, 0x00	; 0
 a8c:	20 32       	cpi	r18, 0x20	; 32
 a8e:	b0 f4       	brcc	.+44     	; 0xabc <vfprintf+0x8e>
 a90:	8b 32       	cpi	r24, 0x2B	; 43
 a92:	69 f0       	breq	.+26     	; 0xaae <vfprintf+0x80>
 a94:	8c 32       	cpi	r24, 0x2C	; 44
 a96:	28 f4       	brcc	.+10     	; 0xaa2 <vfprintf+0x74>
 a98:	80 32       	cpi	r24, 0x20	; 32
 a9a:	51 f0       	breq	.+20     	; 0xab0 <vfprintf+0x82>
 a9c:	83 32       	cpi	r24, 0x23	; 35
 a9e:	71 f4       	brne	.+28     	; 0xabc <vfprintf+0x8e>
 aa0:	0b c0       	rjmp	.+22     	; 0xab8 <vfprintf+0x8a>
 aa2:	8d 32       	cpi	r24, 0x2D	; 45
 aa4:	39 f0       	breq	.+14     	; 0xab4 <vfprintf+0x86>
 aa6:	80 33       	cpi	r24, 0x30	; 48
 aa8:	49 f4       	brne	.+18     	; 0xabc <vfprintf+0x8e>
 aaa:	21 60       	ori	r18, 0x01	; 1
 aac:	2c c0       	rjmp	.+88     	; 0xb06 <vfprintf+0xd8>
 aae:	22 60       	ori	r18, 0x02	; 2
 ab0:	24 60       	ori	r18, 0x04	; 4
 ab2:	29 c0       	rjmp	.+82     	; 0xb06 <vfprintf+0xd8>
 ab4:	28 60       	ori	r18, 0x08	; 8
 ab6:	27 c0       	rjmp	.+78     	; 0xb06 <vfprintf+0xd8>
 ab8:	20 61       	ori	r18, 0x10	; 16
 aba:	25 c0       	rjmp	.+74     	; 0xb06 <vfprintf+0xd8>
 abc:	27 fd       	sbrc	r18, 7
 abe:	2c c0       	rjmp	.+88     	; 0xb18 <vfprintf+0xea>
 ac0:	38 2f       	mov	r19, r24
 ac2:	30 53       	subi	r19, 0x30	; 48
 ac4:	3a 30       	cpi	r19, 0x0A	; 10
 ac6:	98 f4       	brcc	.+38     	; 0xaee <vfprintf+0xc0>
 ac8:	26 ff       	sbrs	r18, 6
 aca:	08 c0       	rjmp	.+16     	; 0xadc <vfprintf+0xae>
 acc:	8e 2d       	mov	r24, r14
 ace:	88 0f       	add	r24, r24
 ad0:	e8 2e       	mov	r14, r24
 ad2:	ee 0c       	add	r14, r14
 ad4:	ee 0c       	add	r14, r14
 ad6:	e8 0e       	add	r14, r24
 ad8:	e3 0e       	add	r14, r19
 ada:	15 c0       	rjmp	.+42     	; 0xb06 <vfprintf+0xd8>
 adc:	8f 2d       	mov	r24, r15
 ade:	88 0f       	add	r24, r24
 ae0:	f8 2e       	mov	r15, r24
 ae2:	ff 0c       	add	r15, r15
 ae4:	ff 0c       	add	r15, r15
 ae6:	f8 0e       	add	r15, r24
 ae8:	f3 0e       	add	r15, r19
 aea:	20 62       	ori	r18, 0x20	; 32
 aec:	0c c0       	rjmp	.+24     	; 0xb06 <vfprintf+0xd8>
 aee:	8e 32       	cpi	r24, 0x2E	; 46
 af0:	21 f4       	brne	.+8      	; 0xafa <vfprintf+0xcc>
 af2:	26 fd       	sbrc	r18, 6
 af4:	78 c1       	rjmp	.+752    	; 0xde6 <vfprintf+0x3b8>
 af6:	20 64       	ori	r18, 0x40	; 64
 af8:	06 c0       	rjmp	.+12     	; 0xb06 <vfprintf+0xd8>
 afa:	8c 36       	cpi	r24, 0x6C	; 108
 afc:	11 f4       	brne	.+4      	; 0xb02 <vfprintf+0xd4>
 afe:	20 68       	ori	r18, 0x80	; 128
 b00:	02 c0       	rjmp	.+4      	; 0xb06 <vfprintf+0xd8>
 b02:	88 36       	cpi	r24, 0x68	; 104
 b04:	49 f4       	brne	.+18     	; 0xb18 <vfprintf+0xea>
 b06:	f1 01       	movw	r30, r2
 b08:	93 fd       	sbrc	r25, 3
 b0a:	85 91       	lpm	r24, Z+
 b0c:	93 ff       	sbrs	r25, 3
 b0e:	81 91       	ld	r24, Z+
 b10:	1f 01       	movw	r2, r30
 b12:	88 23       	and	r24, r24
 b14:	09 f0       	breq	.+2      	; 0xb18 <vfprintf+0xea>
 b16:	ba cf       	rjmp	.-140    	; 0xa8c <vfprintf+0x5e>
 b18:	98 2f       	mov	r25, r24
 b1a:	95 54       	subi	r25, 0x45	; 69
 b1c:	93 30       	cpi	r25, 0x03	; 3
 b1e:	18 f0       	brcs	.+6      	; 0xb26 <vfprintf+0xf8>
 b20:	90 52       	subi	r25, 0x20	; 32
 b22:	93 30       	cpi	r25, 0x03	; 3
 b24:	28 f4       	brcc	.+10     	; 0xb30 <vfprintf+0x102>
 b26:	0c 5f       	subi	r16, 0xFC	; 252
 b28:	1f 4f       	sbci	r17, 0xFF	; 255
 b2a:	ff e3       	ldi	r31, 0x3F	; 63
 b2c:	f9 83       	std	Y+1, r31	; 0x01
 b2e:	0d c0       	rjmp	.+26     	; 0xb4a <vfprintf+0x11c>
 b30:	83 36       	cpi	r24, 0x63	; 99
 b32:	31 f0       	breq	.+12     	; 0xb40 <vfprintf+0x112>
 b34:	83 37       	cpi	r24, 0x73	; 115
 b36:	71 f0       	breq	.+28     	; 0xb54 <vfprintf+0x126>
 b38:	83 35       	cpi	r24, 0x53	; 83
 b3a:	09 f0       	breq	.+2      	; 0xb3e <vfprintf+0x110>
 b3c:	60 c0       	rjmp	.+192    	; 0xbfe <vfprintf+0x1d0>
 b3e:	22 c0       	rjmp	.+68     	; 0xb84 <vfprintf+0x156>
 b40:	f8 01       	movw	r30, r16
 b42:	80 81       	ld	r24, Z
 b44:	89 83       	std	Y+1, r24	; 0x01
 b46:	0e 5f       	subi	r16, 0xFE	; 254
 b48:	1f 4f       	sbci	r17, 0xFF	; 255
 b4a:	42 01       	movw	r8, r4
 b4c:	71 e0       	ldi	r23, 0x01	; 1
 b4e:	a7 2e       	mov	r10, r23
 b50:	b1 2c       	mov	r11, r1
 b52:	16 c0       	rjmp	.+44     	; 0xb80 <vfprintf+0x152>
 b54:	62 e0       	ldi	r22, 0x02	; 2
 b56:	66 2e       	mov	r6, r22
 b58:	71 2c       	mov	r7, r1
 b5a:	60 0e       	add	r6, r16
 b5c:	71 1e       	adc	r7, r17
 b5e:	f8 01       	movw	r30, r16
 b60:	80 80       	ld	r8, Z
 b62:	91 80       	ldd	r9, Z+1	; 0x01
 b64:	26 ff       	sbrs	r18, 6
 b66:	03 c0       	rjmp	.+6      	; 0xb6e <vfprintf+0x140>
 b68:	6e 2d       	mov	r22, r14
 b6a:	70 e0       	ldi	r23, 0x00	; 0
 b6c:	02 c0       	rjmp	.+4      	; 0xb72 <vfprintf+0x144>
 b6e:	6f ef       	ldi	r22, 0xFF	; 255
 b70:	7f ef       	ldi	r23, 0xFF	; 255
 b72:	c4 01       	movw	r24, r8
 b74:	2c 87       	std	Y+12, r18	; 0x0c
 b76:	0e 94 09 07 	call	0xe12	; 0xe12 <strnlen>
 b7a:	5c 01       	movw	r10, r24
 b7c:	83 01       	movw	r16, r6
 b7e:	2c 85       	ldd	r18, Y+12	; 0x0c
 b80:	2f 77       	andi	r18, 0x7F	; 127
 b82:	17 c0       	rjmp	.+46     	; 0xbb2 <vfprintf+0x184>
 b84:	52 e0       	ldi	r21, 0x02	; 2
 b86:	65 2e       	mov	r6, r21
 b88:	71 2c       	mov	r7, r1
 b8a:	60 0e       	add	r6, r16
 b8c:	71 1e       	adc	r7, r17
 b8e:	f8 01       	movw	r30, r16
 b90:	80 80       	ld	r8, Z
 b92:	91 80       	ldd	r9, Z+1	; 0x01
 b94:	26 ff       	sbrs	r18, 6
 b96:	03 c0       	rjmp	.+6      	; 0xb9e <vfprintf+0x170>
 b98:	6e 2d       	mov	r22, r14
 b9a:	70 e0       	ldi	r23, 0x00	; 0
 b9c:	02 c0       	rjmp	.+4      	; 0xba2 <vfprintf+0x174>
 b9e:	6f ef       	ldi	r22, 0xFF	; 255
 ba0:	7f ef       	ldi	r23, 0xFF	; 255
 ba2:	c4 01       	movw	r24, r8
 ba4:	2c 87       	std	Y+12, r18	; 0x0c
 ba6:	0e 94 fe 06 	call	0xdfc	; 0xdfc <strnlen_P>
 baa:	5c 01       	movw	r10, r24
 bac:	2c 85       	ldd	r18, Y+12	; 0x0c
 bae:	20 68       	ori	r18, 0x80	; 128
 bb0:	83 01       	movw	r16, r6
 bb2:	23 fd       	sbrc	r18, 3
 bb4:	20 c0       	rjmp	.+64     	; 0xbf6 <vfprintf+0x1c8>
 bb6:	08 c0       	rjmp	.+16     	; 0xbc8 <vfprintf+0x19a>
 bb8:	80 e2       	ldi	r24, 0x20	; 32
 bba:	90 e0       	ldi	r25, 0x00	; 0
 bbc:	b6 01       	movw	r22, r12
 bbe:	2c 87       	std	Y+12, r18	; 0x0c
 bc0:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 bc4:	fa 94       	dec	r15
 bc6:	2c 85       	ldd	r18, Y+12	; 0x0c
 bc8:	8f 2d       	mov	r24, r15
 bca:	90 e0       	ldi	r25, 0x00	; 0
 bcc:	a8 16       	cp	r10, r24
 bce:	b9 06       	cpc	r11, r25
 bd0:	98 f3       	brcs	.-26     	; 0xbb8 <vfprintf+0x18a>
 bd2:	11 c0       	rjmp	.+34     	; 0xbf6 <vfprintf+0x1c8>
 bd4:	f4 01       	movw	r30, r8
 bd6:	27 fd       	sbrc	r18, 7
 bd8:	85 91       	lpm	r24, Z+
 bda:	27 ff       	sbrs	r18, 7
 bdc:	81 91       	ld	r24, Z+
 bde:	4f 01       	movw	r8, r30
 be0:	90 e0       	ldi	r25, 0x00	; 0
 be2:	b6 01       	movw	r22, r12
 be4:	2c 87       	std	Y+12, r18	; 0x0c
 be6:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 bea:	2c 85       	ldd	r18, Y+12	; 0x0c
 bec:	f1 10       	cpse	r15, r1
 bee:	fa 94       	dec	r15
 bf0:	08 94       	sec
 bf2:	a1 08       	sbc	r10, r1
 bf4:	b1 08       	sbc	r11, r1
 bf6:	a1 14       	cp	r10, r1
 bf8:	b1 04       	cpc	r11, r1
 bfa:	61 f7       	brne	.-40     	; 0xbd4 <vfprintf+0x1a6>
 bfc:	f1 c0       	rjmp	.+482    	; 0xde0 <vfprintf+0x3b2>
 bfe:	84 36       	cpi	r24, 0x64	; 100
 c00:	11 f0       	breq	.+4      	; 0xc06 <vfprintf+0x1d8>
 c02:	89 36       	cpi	r24, 0x69	; 105
 c04:	49 f5       	brne	.+82     	; 0xc58 <vfprintf+0x22a>
 c06:	27 ff       	sbrs	r18, 7
 c08:	08 c0       	rjmp	.+16     	; 0xc1a <vfprintf+0x1ec>
 c0a:	f8 01       	movw	r30, r16
 c0c:	60 81       	ld	r22, Z
 c0e:	71 81       	ldd	r23, Z+1	; 0x01
 c10:	82 81       	ldd	r24, Z+2	; 0x02
 c12:	93 81       	ldd	r25, Z+3	; 0x03
 c14:	0c 5f       	subi	r16, 0xFC	; 252
 c16:	1f 4f       	sbci	r17, 0xFF	; 255
 c18:	09 c0       	rjmp	.+18     	; 0xc2c <vfprintf+0x1fe>
 c1a:	f8 01       	movw	r30, r16
 c1c:	60 81       	ld	r22, Z
 c1e:	71 81       	ldd	r23, Z+1	; 0x01
 c20:	88 27       	eor	r24, r24
 c22:	77 fd       	sbrc	r23, 7
 c24:	80 95       	com	r24
 c26:	98 2f       	mov	r25, r24
 c28:	0e 5f       	subi	r16, 0xFE	; 254
 c2a:	1f 4f       	sbci	r17, 0xFF	; 255
 c2c:	4f e6       	ldi	r20, 0x6F	; 111
 c2e:	b4 2e       	mov	r11, r20
 c30:	b2 22       	and	r11, r18
 c32:	97 ff       	sbrs	r25, 7
 c34:	09 c0       	rjmp	.+18     	; 0xc48 <vfprintf+0x21a>
 c36:	90 95       	com	r25
 c38:	80 95       	com	r24
 c3a:	70 95       	com	r23
 c3c:	61 95       	neg	r22
 c3e:	7f 4f       	sbci	r23, 0xFF	; 255
 c40:	8f 4f       	sbci	r24, 0xFF	; 255
 c42:	9f 4f       	sbci	r25, 0xFF	; 255
 c44:	f0 e8       	ldi	r31, 0x80	; 128
 c46:	bf 2a       	or	r11, r31
 c48:	a2 01       	movw	r20, r4
 c4a:	2a e0       	ldi	r18, 0x0A	; 10
 c4c:	30 e0       	ldi	r19, 0x00	; 0
 c4e:	0e 94 40 07 	call	0xe80	; 0xe80 <__ultoa_invert>
 c52:	78 2e       	mov	r7, r24
 c54:	74 18       	sub	r7, r4
 c56:	45 c0       	rjmp	.+138    	; 0xce2 <vfprintf+0x2b4>
 c58:	85 37       	cpi	r24, 0x75	; 117
 c5a:	31 f4       	brne	.+12     	; 0xc68 <vfprintf+0x23a>
 c5c:	3f ee       	ldi	r19, 0xEF	; 239
 c5e:	b3 2e       	mov	r11, r19
 c60:	b2 22       	and	r11, r18
 c62:	2a e0       	ldi	r18, 0x0A	; 10
 c64:	30 e0       	ldi	r19, 0x00	; 0
 c66:	25 c0       	rjmp	.+74     	; 0xcb2 <vfprintf+0x284>
 c68:	99 ef       	ldi	r25, 0xF9	; 249
 c6a:	b9 2e       	mov	r11, r25
 c6c:	b2 22       	and	r11, r18
 c6e:	8f 36       	cpi	r24, 0x6F	; 111
 c70:	c1 f0       	breq	.+48     	; 0xca2 <vfprintf+0x274>
 c72:	80 37       	cpi	r24, 0x70	; 112
 c74:	20 f4       	brcc	.+8      	; 0xc7e <vfprintf+0x250>
 c76:	88 35       	cpi	r24, 0x58	; 88
 c78:	09 f0       	breq	.+2      	; 0xc7c <vfprintf+0x24e>
 c7a:	b5 c0       	rjmp	.+362    	; 0xde6 <vfprintf+0x3b8>
 c7c:	0d c0       	rjmp	.+26     	; 0xc98 <vfprintf+0x26a>
 c7e:	80 37       	cpi	r24, 0x70	; 112
 c80:	21 f0       	breq	.+8      	; 0xc8a <vfprintf+0x25c>
 c82:	88 37       	cpi	r24, 0x78	; 120
 c84:	09 f0       	breq	.+2      	; 0xc88 <vfprintf+0x25a>
 c86:	af c0       	rjmp	.+350    	; 0xde6 <vfprintf+0x3b8>
 c88:	02 c0       	rjmp	.+4      	; 0xc8e <vfprintf+0x260>
 c8a:	20 e1       	ldi	r18, 0x10	; 16
 c8c:	b2 2a       	or	r11, r18
 c8e:	b4 fe       	sbrs	r11, 4
 c90:	0b c0       	rjmp	.+22     	; 0xca8 <vfprintf+0x27a>
 c92:	84 e0       	ldi	r24, 0x04	; 4
 c94:	b8 2a       	or	r11, r24
 c96:	08 c0       	rjmp	.+16     	; 0xca8 <vfprintf+0x27a>
 c98:	b4 fe       	sbrs	r11, 4
 c9a:	09 c0       	rjmp	.+18     	; 0xcae <vfprintf+0x280>
 c9c:	e6 e0       	ldi	r30, 0x06	; 6
 c9e:	be 2a       	or	r11, r30
 ca0:	06 c0       	rjmp	.+12     	; 0xcae <vfprintf+0x280>
 ca2:	28 e0       	ldi	r18, 0x08	; 8
 ca4:	30 e0       	ldi	r19, 0x00	; 0
 ca6:	05 c0       	rjmp	.+10     	; 0xcb2 <vfprintf+0x284>
 ca8:	20 e1       	ldi	r18, 0x10	; 16
 caa:	30 e0       	ldi	r19, 0x00	; 0
 cac:	02 c0       	rjmp	.+4      	; 0xcb2 <vfprintf+0x284>
 cae:	20 e1       	ldi	r18, 0x10	; 16
 cb0:	32 e0       	ldi	r19, 0x02	; 2
 cb2:	b7 fe       	sbrs	r11, 7
 cb4:	08 c0       	rjmp	.+16     	; 0xcc6 <vfprintf+0x298>
 cb6:	f8 01       	movw	r30, r16
 cb8:	60 81       	ld	r22, Z
 cba:	71 81       	ldd	r23, Z+1	; 0x01
 cbc:	82 81       	ldd	r24, Z+2	; 0x02
 cbe:	93 81       	ldd	r25, Z+3	; 0x03
 cc0:	0c 5f       	subi	r16, 0xFC	; 252
 cc2:	1f 4f       	sbci	r17, 0xFF	; 255
 cc4:	07 c0       	rjmp	.+14     	; 0xcd4 <vfprintf+0x2a6>
 cc6:	f8 01       	movw	r30, r16
 cc8:	60 81       	ld	r22, Z
 cca:	71 81       	ldd	r23, Z+1	; 0x01
 ccc:	80 e0       	ldi	r24, 0x00	; 0
 cce:	90 e0       	ldi	r25, 0x00	; 0
 cd0:	0e 5f       	subi	r16, 0xFE	; 254
 cd2:	1f 4f       	sbci	r17, 0xFF	; 255
 cd4:	a2 01       	movw	r20, r4
 cd6:	0e 94 40 07 	call	0xe80	; 0xe80 <__ultoa_invert>
 cda:	78 2e       	mov	r7, r24
 cdc:	74 18       	sub	r7, r4
 cde:	ff e7       	ldi	r31, 0x7F	; 127
 ce0:	bf 22       	and	r11, r31
 ce2:	b6 fe       	sbrs	r11, 6
 ce4:	0b c0       	rjmp	.+22     	; 0xcfc <vfprintf+0x2ce>
 ce6:	2e ef       	ldi	r18, 0xFE	; 254
 ce8:	b2 22       	and	r11, r18
 cea:	7e 14       	cp	r7, r14
 cec:	38 f4       	brcc	.+14     	; 0xcfc <vfprintf+0x2ce>
 cee:	b4 fe       	sbrs	r11, 4
 cf0:	07 c0       	rjmp	.+14     	; 0xd00 <vfprintf+0x2d2>
 cf2:	b2 fc       	sbrc	r11, 2
 cf4:	05 c0       	rjmp	.+10     	; 0xd00 <vfprintf+0x2d2>
 cf6:	8f ee       	ldi	r24, 0xEF	; 239
 cf8:	b8 22       	and	r11, r24
 cfa:	02 c0       	rjmp	.+4      	; 0xd00 <vfprintf+0x2d2>
 cfc:	a7 2c       	mov	r10, r7
 cfe:	01 c0       	rjmp	.+2      	; 0xd02 <vfprintf+0x2d4>
 d00:	ae 2c       	mov	r10, r14
 d02:	8b 2d       	mov	r24, r11
 d04:	90 e0       	ldi	r25, 0x00	; 0
 d06:	b4 fe       	sbrs	r11, 4
 d08:	0d c0       	rjmp	.+26     	; 0xd24 <vfprintf+0x2f6>
 d0a:	fe 01       	movw	r30, r28
 d0c:	e7 0d       	add	r30, r7
 d0e:	f1 1d       	adc	r31, r1
 d10:	20 81       	ld	r18, Z
 d12:	20 33       	cpi	r18, 0x30	; 48
 d14:	19 f4       	brne	.+6      	; 0xd1c <vfprintf+0x2ee>
 d16:	e9 ee       	ldi	r30, 0xE9	; 233
 d18:	be 22       	and	r11, r30
 d1a:	09 c0       	rjmp	.+18     	; 0xd2e <vfprintf+0x300>
 d1c:	a3 94       	inc	r10
 d1e:	b2 fe       	sbrs	r11, 2
 d20:	06 c0       	rjmp	.+12     	; 0xd2e <vfprintf+0x300>
 d22:	04 c0       	rjmp	.+8      	; 0xd2c <vfprintf+0x2fe>
 d24:	86 78       	andi	r24, 0x86	; 134
 d26:	90 70       	andi	r25, 0x00	; 0
 d28:	00 97       	sbiw	r24, 0x00	; 0
 d2a:	09 f0       	breq	.+2      	; 0xd2e <vfprintf+0x300>
 d2c:	a3 94       	inc	r10
 d2e:	8b 2c       	mov	r8, r11
 d30:	99 24       	eor	r9, r9
 d32:	b3 fc       	sbrc	r11, 3
 d34:	14 c0       	rjmp	.+40     	; 0xd5e <vfprintf+0x330>
 d36:	b0 fe       	sbrs	r11, 0
 d38:	0f c0       	rjmp	.+30     	; 0xd58 <vfprintf+0x32a>
 d3a:	af 14       	cp	r10, r15
 d3c:	28 f4       	brcc	.+10     	; 0xd48 <vfprintf+0x31a>
 d3e:	e7 2c       	mov	r14, r7
 d40:	ef 0c       	add	r14, r15
 d42:	ea 18       	sub	r14, r10
 d44:	af 2c       	mov	r10, r15
 d46:	08 c0       	rjmp	.+16     	; 0xd58 <vfprintf+0x32a>
 d48:	e7 2c       	mov	r14, r7
 d4a:	06 c0       	rjmp	.+12     	; 0xd58 <vfprintf+0x32a>
 d4c:	80 e2       	ldi	r24, 0x20	; 32
 d4e:	90 e0       	ldi	r25, 0x00	; 0
 d50:	b6 01       	movw	r22, r12
 d52:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 d56:	a3 94       	inc	r10
 d58:	af 14       	cp	r10, r15
 d5a:	c0 f3       	brcs	.-16     	; 0xd4c <vfprintf+0x31e>
 d5c:	04 c0       	rjmp	.+8      	; 0xd66 <vfprintf+0x338>
 d5e:	af 14       	cp	r10, r15
 d60:	10 f4       	brcc	.+4      	; 0xd66 <vfprintf+0x338>
 d62:	fa 18       	sub	r15, r10
 d64:	01 c0       	rjmp	.+2      	; 0xd68 <vfprintf+0x33a>
 d66:	ff 24       	eor	r15, r15
 d68:	84 fe       	sbrs	r8, 4
 d6a:	0f c0       	rjmp	.+30     	; 0xd8a <vfprintf+0x35c>
 d6c:	80 e3       	ldi	r24, 0x30	; 48
 d6e:	90 e0       	ldi	r25, 0x00	; 0
 d70:	b6 01       	movw	r22, r12
 d72:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 d76:	82 fe       	sbrs	r8, 2
 d78:	1f c0       	rjmp	.+62     	; 0xdb8 <vfprintf+0x38a>
 d7a:	81 fe       	sbrs	r8, 1
 d7c:	03 c0       	rjmp	.+6      	; 0xd84 <vfprintf+0x356>
 d7e:	88 e5       	ldi	r24, 0x58	; 88
 d80:	90 e0       	ldi	r25, 0x00	; 0
 d82:	10 c0       	rjmp	.+32     	; 0xda4 <vfprintf+0x376>
 d84:	88 e7       	ldi	r24, 0x78	; 120
 d86:	90 e0       	ldi	r25, 0x00	; 0
 d88:	0d c0       	rjmp	.+26     	; 0xda4 <vfprintf+0x376>
 d8a:	c4 01       	movw	r24, r8
 d8c:	86 78       	andi	r24, 0x86	; 134
 d8e:	90 70       	andi	r25, 0x00	; 0
 d90:	00 97       	sbiw	r24, 0x00	; 0
 d92:	91 f0       	breq	.+36     	; 0xdb8 <vfprintf+0x38a>
 d94:	81 fc       	sbrc	r8, 1
 d96:	02 c0       	rjmp	.+4      	; 0xd9c <vfprintf+0x36e>
 d98:	80 e2       	ldi	r24, 0x20	; 32
 d9a:	01 c0       	rjmp	.+2      	; 0xd9e <vfprintf+0x370>
 d9c:	8b e2       	ldi	r24, 0x2B	; 43
 d9e:	b7 fc       	sbrc	r11, 7
 da0:	8d e2       	ldi	r24, 0x2D	; 45
 da2:	90 e0       	ldi	r25, 0x00	; 0
 da4:	b6 01       	movw	r22, r12
 da6:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 daa:	06 c0       	rjmp	.+12     	; 0xdb8 <vfprintf+0x38a>
 dac:	80 e3       	ldi	r24, 0x30	; 48
 dae:	90 e0       	ldi	r25, 0x00	; 0
 db0:	b6 01       	movw	r22, r12
 db2:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 db6:	ea 94       	dec	r14
 db8:	7e 14       	cp	r7, r14
 dba:	c0 f3       	brcs	.-16     	; 0xdac <vfprintf+0x37e>
 dbc:	7a 94       	dec	r7
 dbe:	f2 01       	movw	r30, r4
 dc0:	e7 0d       	add	r30, r7
 dc2:	f1 1d       	adc	r31, r1
 dc4:	80 81       	ld	r24, Z
 dc6:	90 e0       	ldi	r25, 0x00	; 0
 dc8:	b6 01       	movw	r22, r12
 dca:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 dce:	77 20       	and	r7, r7
 dd0:	a9 f7       	brne	.-22     	; 0xdbc <vfprintf+0x38e>
 dd2:	06 c0       	rjmp	.+12     	; 0xde0 <vfprintf+0x3b2>
 dd4:	80 e2       	ldi	r24, 0x20	; 32
 dd6:	90 e0       	ldi	r25, 0x00	; 0
 dd8:	b6 01       	movw	r22, r12
 dda:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 dde:	fa 94       	dec	r15
 de0:	ff 20       	and	r15, r15
 de2:	c1 f7       	brne	.-16     	; 0xdd4 <vfprintf+0x3a6>
 de4:	37 ce       	rjmp	.-914    	; 0xa54 <vfprintf+0x26>
 de6:	f6 01       	movw	r30, r12
 de8:	26 81       	ldd	r18, Z+6	; 0x06
 dea:	37 81       	ldd	r19, Z+7	; 0x07
 dec:	02 c0       	rjmp	.+4      	; 0xdf2 <vfprintf+0x3c4>
 dee:	2f ef       	ldi	r18, 0xFF	; 255
 df0:	3f ef       	ldi	r19, 0xFF	; 255
 df2:	c9 01       	movw	r24, r18
 df4:	2c 96       	adiw	r28, 0x0c	; 12
 df6:	e2 e1       	ldi	r30, 0x12	; 18
 df8:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__epilogue_restores__>

00000dfc <strnlen_P>:
 dfc:	fc 01       	movw	r30, r24
 dfe:	05 90       	lpm	r0, Z+
 e00:	61 50       	subi	r22, 0x01	; 1
 e02:	70 40       	sbci	r23, 0x00	; 0
 e04:	01 10       	cpse	r0, r1
 e06:	d8 f7       	brcc	.-10     	; 0xdfe <strnlen_P+0x2>
 e08:	80 95       	com	r24
 e0a:	90 95       	com	r25
 e0c:	8e 0f       	add	r24, r30
 e0e:	9f 1f       	adc	r25, r31
 e10:	08 95       	ret

00000e12 <strnlen>:
 e12:	fc 01       	movw	r30, r24
 e14:	61 50       	subi	r22, 0x01	; 1
 e16:	70 40       	sbci	r23, 0x00	; 0
 e18:	01 90       	ld	r0, Z+
 e1a:	01 10       	cpse	r0, r1
 e1c:	d8 f7       	brcc	.-10     	; 0xe14 <strnlen+0x2>
 e1e:	80 95       	com	r24
 e20:	90 95       	com	r25
 e22:	8e 0f       	add	r24, r30
 e24:	9f 1f       	adc	r25, r31
 e26:	08 95       	ret

00000e28 <fputc>:
 e28:	0f 93       	push	r16
 e2a:	1f 93       	push	r17
 e2c:	cf 93       	push	r28
 e2e:	df 93       	push	r29
 e30:	8c 01       	movw	r16, r24
 e32:	eb 01       	movw	r28, r22
 e34:	8b 81       	ldd	r24, Y+3	; 0x03
 e36:	81 ff       	sbrs	r24, 1
 e38:	1b c0       	rjmp	.+54     	; 0xe70 <fputc+0x48>
 e3a:	82 ff       	sbrs	r24, 2
 e3c:	0d c0       	rjmp	.+26     	; 0xe58 <fputc+0x30>
 e3e:	2e 81       	ldd	r18, Y+6	; 0x06
 e40:	3f 81       	ldd	r19, Y+7	; 0x07
 e42:	8c 81       	ldd	r24, Y+4	; 0x04
 e44:	9d 81       	ldd	r25, Y+5	; 0x05
 e46:	28 17       	cp	r18, r24
 e48:	39 07       	cpc	r19, r25
 e4a:	64 f4       	brge	.+24     	; 0xe64 <fputc+0x3c>
 e4c:	e8 81       	ld	r30, Y
 e4e:	f9 81       	ldd	r31, Y+1	; 0x01
 e50:	01 93       	st	Z+, r16
 e52:	f9 83       	std	Y+1, r31	; 0x01
 e54:	e8 83       	st	Y, r30
 e56:	06 c0       	rjmp	.+12     	; 0xe64 <fputc+0x3c>
 e58:	e8 85       	ldd	r30, Y+8	; 0x08
 e5a:	f9 85       	ldd	r31, Y+9	; 0x09
 e5c:	80 2f       	mov	r24, r16
 e5e:	09 95       	icall
 e60:	00 97       	sbiw	r24, 0x00	; 0
 e62:	31 f4       	brne	.+12     	; 0xe70 <fputc+0x48>
 e64:	8e 81       	ldd	r24, Y+6	; 0x06
 e66:	9f 81       	ldd	r25, Y+7	; 0x07
 e68:	01 96       	adiw	r24, 0x01	; 1
 e6a:	9f 83       	std	Y+7, r25	; 0x07
 e6c:	8e 83       	std	Y+6, r24	; 0x06
 e6e:	02 c0       	rjmp	.+4      	; 0xe74 <fputc+0x4c>
 e70:	0f ef       	ldi	r16, 0xFF	; 255
 e72:	1f ef       	ldi	r17, 0xFF	; 255
 e74:	c8 01       	movw	r24, r16
 e76:	df 91       	pop	r29
 e78:	cf 91       	pop	r28
 e7a:	1f 91       	pop	r17
 e7c:	0f 91       	pop	r16
 e7e:	08 95       	ret

00000e80 <__ultoa_invert>:
 e80:	fa 01       	movw	r30, r20
 e82:	aa 27       	eor	r26, r26
 e84:	28 30       	cpi	r18, 0x08	; 8
 e86:	51 f1       	breq	.+84     	; 0xedc <__ultoa_invert+0x5c>
 e88:	20 31       	cpi	r18, 0x10	; 16
 e8a:	81 f1       	breq	.+96     	; 0xeec <__ultoa_invert+0x6c>
 e8c:	e8 94       	clt
 e8e:	6f 93       	push	r22
 e90:	6e 7f       	andi	r22, 0xFE	; 254
 e92:	6e 5f       	subi	r22, 0xFE	; 254
 e94:	7f 4f       	sbci	r23, 0xFF	; 255
 e96:	8f 4f       	sbci	r24, 0xFF	; 255
 e98:	9f 4f       	sbci	r25, 0xFF	; 255
 e9a:	af 4f       	sbci	r26, 0xFF	; 255
 e9c:	b1 e0       	ldi	r27, 0x01	; 1
 e9e:	3e d0       	rcall	.+124    	; 0xf1c <__ultoa_invert+0x9c>
 ea0:	b4 e0       	ldi	r27, 0x04	; 4
 ea2:	3c d0       	rcall	.+120    	; 0xf1c <__ultoa_invert+0x9c>
 ea4:	67 0f       	add	r22, r23
 ea6:	78 1f       	adc	r23, r24
 ea8:	89 1f       	adc	r24, r25
 eaa:	9a 1f       	adc	r25, r26
 eac:	a1 1d       	adc	r26, r1
 eae:	68 0f       	add	r22, r24
 eb0:	79 1f       	adc	r23, r25
 eb2:	8a 1f       	adc	r24, r26
 eb4:	91 1d       	adc	r25, r1
 eb6:	a1 1d       	adc	r26, r1
 eb8:	6a 0f       	add	r22, r26
 eba:	71 1d       	adc	r23, r1
 ebc:	81 1d       	adc	r24, r1
 ebe:	91 1d       	adc	r25, r1
 ec0:	a1 1d       	adc	r26, r1
 ec2:	20 d0       	rcall	.+64     	; 0xf04 <__ultoa_invert+0x84>
 ec4:	09 f4       	brne	.+2      	; 0xec8 <__ultoa_invert+0x48>
 ec6:	68 94       	set
 ec8:	3f 91       	pop	r19
 eca:	2a e0       	ldi	r18, 0x0A	; 10
 ecc:	26 9f       	mul	r18, r22
 ece:	11 24       	eor	r1, r1
 ed0:	30 19       	sub	r19, r0
 ed2:	30 5d       	subi	r19, 0xD0	; 208
 ed4:	31 93       	st	Z+, r19
 ed6:	de f6       	brtc	.-74     	; 0xe8e <__ultoa_invert+0xe>
 ed8:	cf 01       	movw	r24, r30
 eda:	08 95       	ret
 edc:	46 2f       	mov	r20, r22
 ede:	47 70       	andi	r20, 0x07	; 7
 ee0:	40 5d       	subi	r20, 0xD0	; 208
 ee2:	41 93       	st	Z+, r20
 ee4:	b3 e0       	ldi	r27, 0x03	; 3
 ee6:	0f d0       	rcall	.+30     	; 0xf06 <__ultoa_invert+0x86>
 ee8:	c9 f7       	brne	.-14     	; 0xedc <__ultoa_invert+0x5c>
 eea:	f6 cf       	rjmp	.-20     	; 0xed8 <__ultoa_invert+0x58>
 eec:	46 2f       	mov	r20, r22
 eee:	4f 70       	andi	r20, 0x0F	; 15
 ef0:	40 5d       	subi	r20, 0xD0	; 208
 ef2:	4a 33       	cpi	r20, 0x3A	; 58
 ef4:	18 f0       	brcs	.+6      	; 0xefc <__ultoa_invert+0x7c>
 ef6:	49 5d       	subi	r20, 0xD9	; 217
 ef8:	31 fd       	sbrc	r19, 1
 efa:	40 52       	subi	r20, 0x20	; 32
 efc:	41 93       	st	Z+, r20
 efe:	02 d0       	rcall	.+4      	; 0xf04 <__ultoa_invert+0x84>
 f00:	a9 f7       	brne	.-22     	; 0xeec <__ultoa_invert+0x6c>
 f02:	ea cf       	rjmp	.-44     	; 0xed8 <__ultoa_invert+0x58>
 f04:	b4 e0       	ldi	r27, 0x04	; 4
 f06:	a6 95       	lsr	r26
 f08:	97 95       	ror	r25
 f0a:	87 95       	ror	r24
 f0c:	77 95       	ror	r23
 f0e:	67 95       	ror	r22
 f10:	ba 95       	dec	r27
 f12:	c9 f7       	brne	.-14     	; 0xf06 <__ultoa_invert+0x86>
 f14:	00 97       	sbiw	r24, 0x00	; 0
 f16:	61 05       	cpc	r22, r1
 f18:	71 05       	cpc	r23, r1
 f1a:	08 95       	ret
 f1c:	9b 01       	movw	r18, r22
 f1e:	ac 01       	movw	r20, r24
 f20:	0a 2e       	mov	r0, r26
 f22:	06 94       	lsr	r0
 f24:	57 95       	ror	r21
 f26:	47 95       	ror	r20
 f28:	37 95       	ror	r19
 f2a:	27 95       	ror	r18
 f2c:	ba 95       	dec	r27
 f2e:	c9 f7       	brne	.-14     	; 0xf22 <__ultoa_invert+0xa2>
 f30:	62 0f       	add	r22, r18
 f32:	73 1f       	adc	r23, r19
 f34:	84 1f       	adc	r24, r20
 f36:	95 1f       	adc	r25, r21
 f38:	a0 1d       	adc	r26, r0
 f3a:	08 95       	ret

00000f3c <__prologue_saves__>:
 f3c:	2f 92       	push	r2
 f3e:	3f 92       	push	r3
 f40:	4f 92       	push	r4
 f42:	5f 92       	push	r5
 f44:	6f 92       	push	r6
 f46:	7f 92       	push	r7
 f48:	8f 92       	push	r8
 f4a:	9f 92       	push	r9
 f4c:	af 92       	push	r10
 f4e:	bf 92       	push	r11
 f50:	cf 92       	push	r12
 f52:	df 92       	push	r13
 f54:	ef 92       	push	r14
 f56:	ff 92       	push	r15
 f58:	0f 93       	push	r16
 f5a:	1f 93       	push	r17
 f5c:	cf 93       	push	r28
 f5e:	df 93       	push	r29
 f60:	cd b7       	in	r28, 0x3d	; 61
 f62:	de b7       	in	r29, 0x3e	; 62
 f64:	ca 1b       	sub	r28, r26
 f66:	db 0b       	sbc	r29, r27
 f68:	0f b6       	in	r0, 0x3f	; 63
 f6a:	f8 94       	cli
 f6c:	de bf       	out	0x3e, r29	; 62
 f6e:	0f be       	out	0x3f, r0	; 63
 f70:	cd bf       	out	0x3d, r28	; 61
 f72:	09 94       	ijmp

00000f74 <__epilogue_restores__>:
 f74:	2a 88       	ldd	r2, Y+18	; 0x12
 f76:	39 88       	ldd	r3, Y+17	; 0x11
 f78:	48 88       	ldd	r4, Y+16	; 0x10
 f7a:	5f 84       	ldd	r5, Y+15	; 0x0f
 f7c:	6e 84       	ldd	r6, Y+14	; 0x0e
 f7e:	7d 84       	ldd	r7, Y+13	; 0x0d
 f80:	8c 84       	ldd	r8, Y+12	; 0x0c
 f82:	9b 84       	ldd	r9, Y+11	; 0x0b
 f84:	aa 84       	ldd	r10, Y+10	; 0x0a
 f86:	b9 84       	ldd	r11, Y+9	; 0x09
 f88:	c8 84       	ldd	r12, Y+8	; 0x08
 f8a:	df 80       	ldd	r13, Y+7	; 0x07
 f8c:	ee 80       	ldd	r14, Y+6	; 0x06
 f8e:	fd 80       	ldd	r15, Y+5	; 0x05
 f90:	0c 81       	ldd	r16, Y+4	; 0x04
 f92:	1b 81       	ldd	r17, Y+3	; 0x03
 f94:	aa 81       	ldd	r26, Y+2	; 0x02
 f96:	b9 81       	ldd	r27, Y+1	; 0x01
 f98:	ce 0f       	add	r28, r30
 f9a:	d1 1d       	adc	r29, r1
 f9c:	0f b6       	in	r0, 0x3f	; 63
 f9e:	f8 94       	cli
 fa0:	de bf       	out	0x3e, r29	; 62
 fa2:	0f be       	out	0x3f, r0	; 63
 fa4:	cd bf       	out	0x3d, r28	; 61
 fa6:	ed 01       	movw	r28, r26
 fa8:	08 95       	ret

00000faa <_exit>:
 faa:	f8 94       	cli

00000fac <__stop_program>:
 fac:	ff cf       	rjmp	.-2      	; 0xfac <__stop_program>
